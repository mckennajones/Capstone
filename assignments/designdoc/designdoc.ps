%!PS-Adobe-2.0
%%Creator: dvips(k) 5.996 Copyright 2016 Radical Eye Software
%%Title: designdoc.dvi
%%CreationDate: Wed Nov 30 18:56:38 2016
%%Pages: 7
%%PageOrder: Ascend
%%BoundingBox: 0 0 612 792
%%DocumentFonts: URWPalladioL-Roma NimbusSanL-Bold NimbusSanL-Regu CMSY7
%%+ URWPalladioL-Bold NimbusSanL-ReguItal
%%DocumentPaperSizes: Letter
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -R -Poutline -t letter designdoc.dvi -o
%+ designdoc.ps
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.11.30:1856
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.24, 2016/04/22
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-grad.pro 0 0
%!
% PostScript prologue for pst-grad.tex.
% Version 1.05, 2006/11/04 
% prepared by Herbert Voss
% For copying restrictions, see pstricks.tex.
%
% For the PSTricks gradient fillstyle.%
% Based on some EPS files by leeweyr!bill@nuchat.sccsi.com (W. R. Lee).%
% Syntax:% D.G. modification begin - Apr.  9, %1998
%%%%%% R0 G0 B0 R1 G1 B1 NumLines MidPoint Angle GradientFill
%   ifGradientCircle GradientScale %GradientPosX GradientPosY
%     R0 G0 B0 R1 G1 B1 NumLines MidPoint %Angle GradientFill
% D.G. modification end
%
/tx@GradientDict 40 dict def
tx@GradientDict begin
/GradientFill {
 /ifCMYK exch def   % do we have rgb or cmyk? hv 1.06
 rotate
 /MidPoint ED
 /NumLines ED
 ifCMYK {
    /LastBlack ED	% 1.06
    /LastYellow ED	% 1.06
    /LastMagenta ED	% 1.06
    /LastCyan ED	% 1.06
    /FirstBlack ED	% 1.06
    /FirstYellow ED	% 1.06
    /FirstMagenta ED	% 1.06
    /FirstCyan ED	% 1.06
 }{ /LastBlue ED
    /LastGreen ED
    /LastRed ED
    /FirstBlue ED
    /FirstGreen ED
    /FirstRed ED
 } ifelse
 /GradientPosY ED
 /GradientPosX ED
 /GradientScale ED
 /ifGradientCircle ED
 % This avoids gaps due to rounding errors:
 clip
 pathbbox           %leave llx,lly,urx,ury on stack
 4 copy /ury ED /urx ED /lly ED /llx ED
 /y ED /x ED
 ifGradientCircle
   { 0 GradientPosX eq { 0 GradientPosX eq {2 copy translate} if } if }
   {2 copy translate} ifelse
 y sub neg /y ED
 x sub neg /x ED  % This avoids gaps due to rounding errors:
 ifCMYK {				% 1.06
    LastCyan FirstCyan add 2 div	% 1.06
    LastMagenta FirstMagenta add 2 div	% 1.06
    LastYellow FirstYellow add 2 div	% 1.06
    LastBlack FirstBlack add 2 div	% 1.06
    setcmykcolor			% 1.06
  }{
    LastRed FirstRed add 2 div
    LastGreen FirstGreen add 2 div
    LastBlue FirstBlue add 2 div
    setrgbcolor
  } ifelse
 ifGradientCircle
   { /YSizePerLine y NumLines div def
     /CurrentY y 2 div def
     /MidLine NumLines 2 div 1 MidPoint sub mul abs cvi def
   }{
     fill
     /YSizePerLine y NumLines div def
     /CurrentY 0 def
     /MidLine NumLines 1 MidPoint sub mul abs cvi def
   } ifelse
 MidLine NumLines 2 sub gt 
   { /MidLine NumLines def }
   { MidLine 2 lt { /MidLine 0 def } if } ifelse
 MidLine 0 gt {
  ifCMYK {
    /Cyan FirstCyan def
    /Magenta FirstMagenta def
    /Yellow FirstYellow def
    /Black FirstBlack def
    /CyanIncrement LastCyan FirstCyan sub MidLine 1 sub div def
    /MagentaIncrement LastMagenta FirstMagenta sub MidLine 1 sub div def
    /YellowIncrement LastYellow FirstYellow sub MidLine 1 sub div def
    /BlackIncrement LastBlack FirstBlack sub MidLine 1 sub div def
  }{
    /Red FirstRed def
    /Green FirstGreen def
    /Blue FirstBlue def
    /RedIncrement LastRed FirstRed sub MidLine 1 sub div def
    /GreenIncrement LastGreen FirstGreen sub MidLine 1 sub div def
    /BlueIncrement LastBlue FirstBlue sub MidLine 1 sub div def
  } ifelse
  MidLine { GradientLoop } repeat
 } if
 MidLine NumLines lt {
  ifCMYK {
    /Cyan LastCyan def
    /Magenta LastMagenta def
    /Yellow LastYellow def
    /Black LastBlack def
    /CyanIncrement FirstCyan LastCyan sub NumLines MidLine sub 1 sub div def
    /MagentaIncrement FirstMagenta LastMagenta sub NumLines MidLine sub 1 sub div def
    /YellowIncrement FirstYellow LastYellow sub NumLines MidLine sub 1 sub div def
    /BlackIncrement FirstBlack LastBlack sub NumLines MidLine sub 1 sub div def
  }{
    /Red LastRed def
    /Green LastGreen def
    /Blue LastBlue def
    /RedIncrement FirstRed LastRed sub NumLines MidLine sub 1 sub div def
    /GreenIncrement FirstGreen LastGreen sub NumLines MidLine sub 1 sub div def
    /BlueIncrement FirstBlue LastBlue sub NumLines MidLine sub 1 sub div def
  } ifelse
  NumLines MidLine sub { GradientLoop } repeat  
 } if
} def/GradientLoop {
% D.G. modification begin - Jul. 23, 1997 / Apr.  9, 1998
  ifGradientCircle
   {CurrentY 0 gt {
% The default center used is the center of the bounding box of the object
      0 GradientPosX eq        {0 GradientPosX eq
           {/GradientPosX urx llx sub 2 div def
            /GradientPosY ury lly sub 2 div def} if} if
      GradientPosX GradientPosY CurrentY GradientScale mul 0 360 arc
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill
      /CurrentY CurrentY YSizePerLine sub def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
  } if }   { 0 CurrentY moveto    x 0 rlineto
    0 YSizePerLine rlineto    x neg 0 rlineto    closepath
      ifCMYK { Cyan Magenta Yellow Black setcmykcolor }
           { Red Green Blue setrgbcolor } ifelse 
      fill    
      /CurrentY CurrentY YSizePerLine add def
      ifCMYK {
        /Cyan Cyan CyanIncrement add def
        /Magenta Magenta MagentaIncrement add def
        /Yellow Yellow YellowIncrement add def
        /Black Black BlackIncrement add def
      }{	
        /Blue Blue BlueIncrement add def
        /Green Green GreenIncrement add def
        /Red Red RedIncrement add def
      } ifelse
      } ifelse% D.G. modification end
    }def
%
/GradientFillHSB { %	hv 2006-11-04
  rotate
  /MidPoint ED
  /NumLines ED
  /LastBrightness ED
  /LastSaturation ED
  /LastHue ED
  /FirstBrightness ED
  /FirstSaturation ED
  /FirstHue ED
  % This avoids gaps due to rounding errors:
  clip
  pathbbox           %leave llx,lly,urx,ury on stack
  /y ED /x ED
  2 copy translate
  y sub neg /y ED
  x sub neg /x ED
  % This avoids gaps due to rounding errors:
  LastHue FirstHue add 2 div
  LastSaturation FirstSaturation add 2 div
  LastBrightness FirstBrightness add 2 div
  sethsbcolor
  fill
  /YSizePerLine y NumLines div def
  /CurrentY 0 def
  /MidLine NumLines 1 MidPoint sub mul abs cvi def
  MidLine NumLines 2 sub gt
  { /MidLine NumLines def }
  { MidLine 2 lt { /MidLine 0 def } if }
  ifelse
  MidLine 0 gt
  {
    /Hue FirstHue def
    /Saturation FirstSaturation def
    /Brightness FirstBrightness def
    /HueIncrement LastHue FirstHue sub MidLine 1 sub div def
    /SaturationIncrement LastSaturation FirstSaturation sub MidLine 1 sub
                         div def
    /BrightnessIncrement LastBrightness FirstBrightness sub MidLine 1 sub
                         div def
    MidLine { GradientLoopHSB } repeat
  } if
  MidLine NumLines lt
  {
    /Hue LastHue def
    /Saturation LastSaturation def
    /Brightness LastBrightness def
    /HueIncrement FirstHue LastHue sub NumLines MidLine sub 1 sub div def
    /SaturationIncrement FirstSaturation LastSaturation sub
                         NumLines MidLine sub 1 sub div def
    /BrightnessIncrement FirstBrightness LastBrightness sub
                         NumLines MidLine sub 1 sub div def
    NumLines MidLine sub { GradientLoopHSB } repeat
  } if
} def
/GradientLoopHSB {
  0 CurrentY moveto
  x 0 rlineto
  0 YSizePerLine rlineto
  x neg 0 rlineto
  closepath
  Hue Saturation Brightness sethsbcolor fill
  /CurrentY CurrentY YSizePerLine add def
  /Brightness Brightness BrightnessIncrement add def
  /Saturation Saturation SaturationIncrement add def
  /Hue Hue HueIncrement add def
} def
%
end
%
% END pst-grad.pro

%%EndProcSet
%%BeginProcSet: 8r.enc 0 0
% File 8r.enc  TeX Base 1 Encoding  Revision 2.0  2002-10-30
%
% @@psencodingfile@{
%   author    = "S. Rahtz, P. MacKay, Alan Jeffrey, B. Horn, K. Berry,
%                W. Schmidt, P. Lehman",
%   version   = "2.0",
%   date      = "27nov06",
%   filename  = "8r.enc",
%   email     = "tex-fonts@@tug.org",
%   docstring = "This is the encoding vector for Type1 and TrueType
%                fonts to be used with TeX.  This file is part of the
%                PSNFSS bundle, version 9"
% @}
% 
% The idea is to have all the characters normally included in Type 1 fonts
% available for typesetting. This is effectively the characters in Adobe
% Standard encoding, ISO Latin 1, Windows ANSI including the euro symbol,
% MacRoman, and some extra characters from Lucida.
% 
% Character code assignments were made as follows:
% 
% (1) the Windows ANSI characters are almost all in their Windows ANSI
% positions, because some Windows users cannot easily reencode the
% fonts, and it makes no difference on other systems. The only Windows
% ANSI characters not available are those that make no sense for
% typesetting -- rubout (127 decimal), nobreakspace (160), softhyphen
% (173). quotesingle and grave are moved just because it's such an
% irritation not having them in TeX positions.
% 
% (2) Remaining characters are assigned arbitrarily to the lower part
% of the range, avoiding 0, 10 and 13 in case we meet dumb software.
% 
% (3) Y&Y Lucida Bright includes some extra text characters; in the
% hopes that other PostScript fonts, perhaps created for public
% consumption, will include them, they are included starting at 0x12.
% These are /dotlessj /ff /ffi /ffl.
% 
% (4) hyphen appears twice for compatibility with both ASCII and Windows.
%
% (5) /Euro was assigned to 128, as in Windows ANSI
%
% (6) Missing characters from MacRoman encoding incorporated as follows:
%
%     PostScript      MacRoman        TeXBase1
%     --------------  --------------  --------------
%     /notequal       173             0x16
%     /infinity       176             0x17
%     /lessequal      178             0x18
%     /greaterequal   179             0x19
%     /partialdiff    182             0x1A
%     /summation      183             0x1B
%     /product        184             0x1C
%     /pi             185             0x1D
%     /integral       186             0x81
%     /Omega          189             0x8D
%     /radical        195             0x8E
%     /approxequal    197             0x8F
%     /Delta          198             0x9D
%     /lozenge        215             0x9E
%
/TeXBase1Encoding [
% 0x00
 /.notdef /dotaccent /fi /fl
 /fraction /hungarumlaut /Lslash /lslash
 /ogonek /ring /.notdef /breve
 /minus /.notdef /Zcaron /zcaron
% 0x10
 /caron /dotlessi /dotlessj /ff
 /ffi /ffl /notequal /infinity
 /lessequal /greaterequal /partialdiff /summation
 /product /pi /grave /quotesingle
% 0x20
 /space /exclam /quotedbl /numbersign
 /dollar /percent /ampersand /quoteright
 /parenleft /parenright /asterisk /plus
 /comma /hyphen /period /slash
% 0x30
 /zero /one /two /three
 /four /five /six /seven
 /eight /nine /colon /semicolon
 /less /equal /greater /question
% 0x40
 /at /A /B /C
 /D /E /F /G
 /H /I /J /K
 /L /M /N /O
% 0x50
 /P /Q /R /S
 /T /U /V /W
 /X /Y /Z /bracketleft
 /backslash /bracketright /asciicircum /underscore
% 0x60
 /quoteleft /a /b /c
 /d /e /f /g
 /h /i /j /k
 /l /m /n /o
% 0x70
 /p /q /r /s
 /t /u /v /w
 /x /y /z /braceleft
 /bar /braceright /asciitilde /.notdef
% 0x80
 /Euro /integral /quotesinglbase /florin
 /quotedblbase /ellipsis /dagger /daggerdbl
 /circumflex /perthousand /Scaron /guilsinglleft
 /OE /Omega /radical /approxequal
% 0x90
 /.notdef /.notdef /.notdef /quotedblleft
 /quotedblright /bullet /endash /emdash
 /tilde /trademark /scaron /guilsinglright
 /oe /Delta /lozenge /Ydieresis
% 0xA0
 /.notdef /exclamdown /cent /sterling
 /currency /yen /brokenbar /section
 /dieresis /copyright /ordfeminine /guillemotleft
 /logicalnot /hyphen /registered /macron
% 0xB0
 /degree /plusminus /twosuperior /threesuperior
 /acute /mu /paragraph /periodcentered
 /cedilla /onesuperior /ordmasculine /guillemotright
 /onequarter /onehalf /threequarters /questiondown
% 0xC0
 /Agrave /Aacute /Acircumflex /Atilde
 /Adieresis /Aring /AE /Ccedilla
 /Egrave /Eacute /Ecircumflex /Edieresis
 /Igrave /Iacute /Icircumflex /Idieresis
% 0xD0
 /Eth /Ntilde /Ograve /Oacute
 /Ocircumflex /Otilde /Odieresis /multiply
 /Oslash /Ugrave /Uacute /Ucircumflex
 /Udieresis /Yacute /Thorn /germandbls
% 0xE0
 /agrave /aacute /acircumflex /atilde
 /adieresis /aring /ae /ccedilla
 /egrave /eacute /ecircumflex /edieresis
 /igrave /iacute /icircumflex /idieresis
% 0xF0
 /eth /ntilde /ograve /oacute
 /ocircumflex /otilde /odieresis /divide
 /oslash /ugrave /uacute /ucircumflex
 /udieresis /yacute /thorn /ydieresis
] def


%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
TeXDict begin @defspecial

 systemdict /pdfmark known{userdict /?pdfmark systemdict /exec get
put}{userdict /?pdfmark systemdict /pop get put userdict /pdfmark systemdict
/cleartomark get put}ifelse

 /DvipsToPDF{72.27 mul Resolution div} def/PDFToDvips{72.27 div Resolution
mul} def/BPToDvips{72 div Resolution mul}def/BorderArrayPatch{[exch{dup
dup type/integertype eq exch type/realtype eq or{BPToDvips}if}forall]}def/HyperBorder
{1 PDFToDvips} def/H.V {pdf@hoff pdf@voff null} def/H.B {/Rect[pdf@llx
pdf@lly pdf@urx pdf@ury]} def/H.S {currentpoint HyperBorder add /pdf@lly
exch def dup DvipsToPDF 72 add /pdf@hoff exch def HyperBorder sub /pdf@llx
exch def} def/H.L {2 sub dup/HyperBasePt exch def PDFToDvips /HyperBaseDvips
exch def currentpoint HyperBaseDvips sub /pdf@ury exch def/pdf@urx
exch def} def/H.A {H.L currentpoint exch pop vsize 72 sub exch DvipsToPDF
HyperBasePt sub sub /pdf@voff exch def} def/H.R {currentpoint HyperBorder
sub /pdf@ury exch def HyperBorder add /pdf@urx exch def currentpoint
exch pop vsize 72 sub exch DvipsToPDF sub /pdf@voff exch def} def
 
@fedspecial end
%%BeginFont: NimbusSanL-ReguItal
%!PS-AdobeFont-1.0: NimbusSanL-ReguItal 1.05a
%%Title: NimbusSanL-ReguItal
%%CreationDate: Thu Mar 20 10:08:40 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-ReguItal
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-ReguItal known{/NimbusSanL-ReguItal findfont dup/UniqueID known{dup
/UniqueID get 5020908 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-ReguItal def
/FontBBox [-178 -284 1108 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular Italic) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle -12 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CCFB357288DEF82BE
422B9914B075E7EC18835881AB22C2A47DAAA4EEC0A8DDA1CDB5292531E5261E
D8FBC087C00D12D9BDC0051529207238FFF92500581849C386F8427D44353C41
FA42972E325397AFA55CA5189B1EF4979F06711E406A219DCC46C88FC82473B8
567E47B75364FBEE1A883FC42C9CD2E1EB581D4D0C25F509BF595314EA222031
BA9606F17E3E4931D50AC6AC2B63711B0E85A6CBE6FFD9275461474D673694DA
B38706890D6422CBB2B499C0C89A7AF218BD84FE0B13D689EB5930AD0DAB5C0B
55F68356C285EDD85B3C0AFE1B9001572AEC0C3692958F7F3E16DB0C2D0647BA
C1A4EA2EAE112F680B33AD9D59962FBD63BED5766186A1C4C21F500B374218E5
7CEBA25638D9F0520E789B2F39CB0567D6BD72C076BC76095B60ED5E82F33E9E
D2448B364626AB558A979368B0F1495D8C504EA8B6E291E781F5DD708FE9B5D9
9CC26079902BF1EA845CC6ECC973DACF88D956769DBABCCC1F7C44B3B1111732
3CFE60583458E93FB796A440E43018C4CFE846F1C79CCA0416E6B446ACCD1D05
A4A682928674FB388BB109497BEE1F0AD9EB289AD984DF057E8A27F23601CC25
EBA38ED89F18CE03BE3645F75ABB0BA2D6CA8746A0F96518E865AD53CD4F428F
601B06E05B6B3F27C3A62CCE52668854DB4DDED614791C32F31A1595BC2D3E16
772C0ECFFBD06A07A1221AEAFB8CC91029C159B121F677C9AAFDE187994135D2
741BDCF6B4442E6728BD38194DC406A9F88D3A94E458275AF47E670A57FFD531
F72836EE4932C0312FAA0C1CE257FBF790B4B211B413770AE9E73A46BA6E12F4
A58A5CA4121CD6A7A7214DDA473850650623BAE8D7BC6F4034C6B648F329EADA
DB8049C762F7D3B273FE1AD47F072E6A69282866FE0F37107E9DAA8FD7EEF483
7B825A0E000E57B711220A699F38EEE6BD832C6ADD8CABCF7A9A5EDBA83116C9
D9139619E407AF339C1A479065EA6FD7A58A466C6230CB5A8F8583955E0AB271
536098804287DA09D1CBECBC283B2810D28A1EDBFB2158886231E454146E77EE
C99A662AA0C3B597123548EA9580E54EF1AF866B3D2246EB50B888ADD050680A
40B0DED04F57B4CE47288EAC8F6969FA29AA6B28CE5FDECA6909DE6337F5ACA0
2E982F9ED1C700AE0D0BB9B61249DDD8BFF65B53B51269DFB0158C60C1489AC2
AC1DCFBED577038DE80F87CE86751494320449007EA922B5924F53BA2402843D
BA09637FBDD85AAFC17A8E9B0CE1A9508F0F8E5884AAF083013AC5189718CA0E
705F28AE75ED2CC22B05B89ABA446304EEAAC280A94CF9C9280C98EABA19973B
B596EEB41C7FAAB530481B448A8CF6D526BDEE9E8866C5568DD10AB87853A39C
3B61627ECB39D5BA7F8E095B9F852E5F33B0545269CC9F0661D553F814511378
EBB3037BB0667F0382E4278A7F0FA073A6AB3EEB512FA661DACF8693BEF31C59
4F7D0F9390F99FFDF77D85D430A5383B428FC35C43EC628F59BBB3BDE1E3266A
AACF6605C71D7F13530C884868B786877240EDBE8B6209CD78FACCD78AB90162
7FBE024354EE7C3106049D6C9FAA13FD406182B5F62D26C28668CA145597150B
847315C78C3871F7DF0D5B8BBD40BB58C84EEBB414C741759F68C2C9292B509F
C3F79A0124BF8CAE36821711979AB941B3ED69062C3BF7A07119CF1E5774AEC1
2CDA3F68A61B0DD5FF9CA582782EE80E2D289A653949F11C130F37E27A62B17E
62CF33D67D8CEB212797BBE778DCDB2D0F6726BCF115DA15343D86043F15602A
346C1667DC625491A42A8BF5D93FD72804610E4F730DAF2F2D5AB767C320C625
43E266E613D62496D758AEBFBD494623BB80B90C04471361C9C6C67A8FD6A0AD
39AE434D463A1F19FDC6DCA5DD36E1C5E6936F918FA4340BAA063C6C8B2D9596
B95E63CD7D1717AF26AF23F5BEEA4B6FEAD03CB42E9B8E0EE958725486FC8999
043BE922A437931AC634DB6CCEBFE956BA1C0325CE2DE31B2BE868212F8ECDF6
B1120EE5847B4D05F35EF72EE6877A649F1F0B0D02F825C5B9FA9253689BB1D9
19F07516CC7DED75F22A45593458051071C68894573174E2CCDBAD41CCBC9D7F
3B1FA3F5965734BB056519F0A3BC71C22B6121498EC54148DBBACE41A5C8997C
5A7CF67F62A742E6BC0DD381D3B1E29D8E5D96E4B4D078D0AC4468414C1DD16F
A1E961D6D1B69AC63ECBEA52465E94BDA6608BDD32EEA1303B6B7283508438CD
CC08EEDA126361175E6F351A13AF781434B9866F209C464B78D16F265FD71A55
FCA6AB4D9223411B4410F6EEE8899AFF4B7709DE055E01E3B689C401EF4F5687
CE15A9B463A5544AC478593B1F86330BBABC032B2FE5F1EB277F54B2823AA255
4D136E6407090CC3500261E7AA1FDA0FAFC54FB8512D7C3AF75CC90706C0792B
F83DC22287F5564C67A85E7F028AD4E36D9812B0A1304B5BE9931B8765008C9D
7315D1D95DA6D890D4C4C56F1178FE102BC5934CBA6B901C3E596E44777A345A
6319C445A0B73DF1BE96DD4A1371DCFE0815250F5DEF343F3A2BD2BE8077C420
24145489032BBE7256DE26DC32DFDD7E7B37C91F1E746570218DE2B43B17EE08
A038B72FD64E16ECE9A006E4692F387925B855DEB0C8319E487194EFDDA23C7A
34A5685B00AE193E68CE6BF8318AB0D005FF00BB7A33CF9B480D0CE94E744456
2E930746B52277D779DA5E83FC737EBB27E4E002EE923F300BAEE92CBC8DA00A
DBDCA598BC786EFE45769915104FFE7627557D6C3B5D07C67A87D17A42F405DB
085DA495E0936FC9D4C05D73CB3E32995F02D50F1ADA5E6D5BCE7133E052A678
85B3B094600AE0EE51171563ABB20F8903F68B53CE1F767A0D342095DB2E3199
989112A93BCAD2CE9176263DD4706C0E690FE3C0137A3B94FB9827033DFE6F55
4E27D396913DD403847BD18FB7C785B0D2DD79D5D9A077A9801EA681AE7085B1
1008ADCA5D9B8944765002C63CE179E198B63506C3DABCC217593E1331BBD34D
05921D9D9BB93A55D4969CD4C741B3B206D8DA5C5DBE3734EAE675C6EFF9C7FA
54E5E8F3E22FE4C82E254EC0005646F3FAB430066C813B7B24043B69430454C3
19F218DF4EFAA7497DACB5B899C7E55E6A90FFCD2DEFB25578443B017E6E58BF
960B46AC70452354D3F57BBD66172573E4B795FDFA243D4839D26A4FA8405D0A
5CCADF3103F9614E9212687132B1CDD2EE89C040EC9F05BE60712140EBEF5399
1F9CA740FBAE25E2C2BD8B28FAA4B74449A00AC4C85BDF6C5630EA1154B2B4B6
ADDCFC9AAC3E572E4D683E3E3BAEAA8B40A5C303AE95CE1C65EE2E62A9590C52
718DF9A33208D0064CC99185227132C2495E88397CFEFDF58E8354D16E78B052
354E22EDF9C32DA435D02E14C16254C0BD27543A6188D4DB59DF75E9FE6FDDB1
843C9AF4A586649D7EAFA268C3BF08F241F619C84C7AD65BE5EE32D1E0F33D53
65EB446E2FB6E3FAC35E9FD10E5DA3CFE097F910D3F2F2BC6DDFEC5E7563F3FD
906B7E5A4E55FDE7BCA4F85370B4A677EC7B312B91788BB6E32551460E3773FB
BA942C0439B850C6AF4E0C788EFC9E23F2CF6298CA30BBE807A326707869C5A2
D582B1104A63149C56900B4887C621FC4054DFFC10BEC814C711DF2989809A5B
6BD0947ED8623D714938488837012221D7FE9E355B38D0CD84384A9D8EB6C55E
01AFE82A4DD3633587EE8C6B4FBD04AE1172F05D6F5CA1FE510AD5BE972DAA8D
73D173921B641CA1C93E9296ACE789379949CDD1FB9D9DB4BD68EA76F314C425
F4230B461E7E79D842EF957D9B10519421E482C8264257997DDECD1941780600
16B1BEAC26EC0A71D7615333F1E3BA49D03EBCF734C64A2601B61BAAB5004C8B
DB4472C1B192C511B85809DB309252AE08956AFB54FE3F403F519D30623FC943
9F2AA61BF7FF81D9453360C48B7C51876626C3EED5295E2CB119884546EDD78A
A3DF299B8F7D398DFC65F55291C1ED0510ABCAB5592C4B8701EBA7A1EFC4E9E4
2DFC34B655E3994D3EA719802639D2389D2E118409618F8B240AB1AD30B31401
461C06C920223E405785DCF3C216B3C6F6AE0D3D09851DDDF33FF14A4B295376
59D53A7AD0532C9ACBDDA99108815BE9A261C44A90AC7F12F0039491A8D3B23F
685191B92521BC0F6BAC58CB6E6618B248E8AA5BEA5F80C08FBDF0D1AD8299CB
A3A98422101683FA54E4867E039DA13D03BDC72E2A7B733531CDBED8C00FD622
55151C1636FC8CD04FE684936C9A418974962E48C275B3A549D68FA7EC5986DA
B86A265C5599578413DA49E67CB602833878CA25CB8C198F2BAA4061C9A21728
741BB62C49081336BCE157E0A6352DF85B10858DFD923FD708EDFB0596D5BD57
FDE4EB6C2F6E1802AD1CB3280864C1AB2E7DB2CA9051933BFBB301AA8B21DD76
A71FE7D56060BA44A02B9DCAEBE8592E9D5BF00EC29E11C8D330CCDB2EA5CD71
9059A012F0471CDB483C01B768392487FF7982152601725E688109F5FB6A4087
6FDAA5028FACA2B0E1CD9FB1D719B9831FFF4AFCF72354EF60E840F287350CC6
3729C799916EDDEA3627FB180A5404E159AD7F294726D28046D36B13C11F20E4
65A86FC419E74B8F5E920A196D1B1D6757F90CB7CEC9C6C814A61A86A6005A98
F4581851A4144B1977023A5428CE5F6EB8082C01322104D59F47BAFE5C89AD82
E2C932511A356F6CBECA6C9C020AD386D0853C709AA4D042D195FEC82707AC74
D2AFAC09EB170F058E6A2F14407505FD5B1873A1780F549F5D591713D3C91746
63137B0770F3F68F99FE4EFA6FAB7D7A8B3C2E4048C7902EDFFA8FF390E117D1
E2F9A29F89343B1AC971C2541984544B2A2C27ACEE251C92650538AF70C711C7
273C4D0D55BB1F81ACE2BB243124AFA6D698AC6F727D0ABA5833BA77740FC952
E7261EEBE74E9F0FECC3A1C9730EA198214E4842844AC39D7D79DEA1AB9CC538
325485B5CD5A633853884568EE705DF68B8C81EB863A9199009912D4C2EEF3E2
5E8003893DF7EF551869E9FB780B6058643ED909B8238711E9F5CDDF7F5ABFB2
5C63F8CC5C72AE5B9C7AAFC7D2B99B652AE68073FE0F9BDE7B7B7EA2B5A5BB74
4DE86C3DE781142DC6898E36274BBD594C40818A22DE93BDE977FEA7733A0A19
CE521B38214F18C50CE90D1167B52E95ABC9E4642D46EF9CE6E32629D5A162D3
276CCC465097E0CE8D1CE7B04F8B5B0224454D0470C92C43AB1131DCA0C70452
901235069A44BFD21EC07D0B9A19495FFD08CF58EDFDA180003B80A85F25C428
A04DCC94192D3E410021CF3A8F75E99F3E3D7A9F92C4EE553EA76F8233E21152
2A76E766FF9E9E1787278B2721E71010E3AA37BCBE20FB3A6262812B36137DBA
728420856A240C5F7CA4EBD1E5332D708A40B7FD30F2BCA83D3C50FCC8C83B9A
568B93D2569C139382E90D9F3BF5449EAB7ECD70BEAC511DB8E7529610C8276E
581A93EFE5B9FEF53BF5448447BC7A47F8B4E316452F0E4B3C6729EFCFA9A275
CAA237B9B87EA500957676FB19B8FF9BD6D7CDAE7FD01A9E43868D6D1923ABF5
46BB49021DA4281E2D863012F492A4BE37280D75E5EE1BEC13C1AC2E634FEF24
A81C5B8970C1795E3988F9D5174E55BFFF51EAF61D803019738223B16481129B
E40CD269E71FE35CD3ED2CA9275D4E62679FD75EC8116A570ECC5B2A4171E2D0
A3CCB00087CF0D4BFCF0160F11DAF8363B25ADAE216269B5FCE18CCE171696B9
AD29AB2EC4949E9D6531EF2C89E73B71F46660DE6330BC47BFEE826EDA5F060D
62C144F42D6DA5554DAB1FC48B767204D8205766CBAB182309C87862957E631E
26131E164A90ECF7413EB3A16C6663B2E9B82B692041FB9B2E5B6DA9886A78B6
335E68537CC60ED3834661E982A62FB9D9487CC71B0A118CD37780741DD06AB4
32ACC0D51C92411E8AC0DC24B58AB8C81A265032AE591C6CEF3477109A102D97
18D2D14FB9E5B10224FFDA93C343BF60F411C1E8B7C29A5327E7EF7BC139FD28
6AF058F38D4FAB88FB16B2C39C5B49A897B0BEB6DB1B2E790A409CC088A04E4E
46C8D49936337D3BE644F4B45490A975B48A7070D60D9275E3B6E3AAE73F03D8
365114B3750721ADEA5E0992C50578151349B49D5C129500C081554ABB9C1B95
27C66B4E660B6F184E1761A84B43082CBDF43E54EBBDF1DC59C1C48E25CBD576
DF0373712573DA4F2F3955AC993C06C1B9B35247E5E788C67CABCBFE392B8A70
EBBAE943F8887A374EBEE728E00A3C1EB4DCB6680E5D401AF6E92DEE515240D0
9B3D5A915CDE58BC20E9975B1B80FC7986FED8F78C316A616C1BBF0F1D4F1B45
9E2E61266159A6F639308E48ECFF9DFA2BFC6D9EF3F1DF454EFFA92EC0B09F54
C4AAC2EA6920190C866A1D7118C653B35F088367E90DC3BD7489109340C1F96C
63C4B5F31D2412BF02876171689D89B056067AC7CA6AF626C6D6852D9A913D03
2CCEB692ACDD20002716FD44847BEFF3C4D3C5CD3BD0382294AF4B33E6141552
48835552DEC4B976F2ADAFB6A5049079B762494F156108445B02792711300D7F
89A38C893A934F237AD6490EAFBD038149712ADCC7624E1B2AA8B6B84F9796B1
D03C07DAA2059467DF1078A8516ADB8A88BFEEA269857A61098E79CD58287A55
895C051288E751372BBA55A44DC9EDD75C5C83B902DA2CA9BF2453683802D730
F117F99C9A9B6E56E64DFA4EE80799EF80793D95F19256E382CC844A7924961A
4C889C7DBDDE630AA5662E4F82D5C52C376320779435626D38869F2D61F4E5FF
877A50DCE0651A714B6FBE5AC43BE8E479AC0329D83E8490E368FEA8E0F362B2
C31918876B667F461CF8CA5ADDBBD0D5D63F82898F8BA4B2A42B6D535E528150
364D23A1BD70038B8E4BA5A1DD36C4A52075002FA5B91177BFF2F297B2517838
808F45F6319C23F6E575DEDD0866EA59F4A313919666B3979BFC5768BCE44924
5D20D7BD60D6E6968514BD9FA480717195706D2CD4E746425250E80CAE114B5C
88A2F2687BEC991745585B3030A82F606A5C867FE4863C34988131BFDBB7A10C
DD77A1BAA4C06862CCEC480B095FF1C804DC8B2C283113DBE1D0C83C7FE6D0E6
AAB1C7D320912D62E9E7C8AF10A492D41ACE7543476227E7E692ECC1230CE7F6
D65579AEA099ED59A4E553B4B59EDBC4632A36FA2DF234EC0EC6CCE8D5FE2DAC
8BDF6E9A292AA8B85397B19860EF717B3253E2B1285A565373E3636CC032F286
9A9A97F6E6C143B011DC42C555D05FB1155A2AB4AB0AF2233F18B579391C3EDC
CA70CF21A696BD96AC179D75FAA72A4B2C82850984D7FF8BE9C6FF19264E252D
A045FBF544FDDEF497D573339148157B2DE035818251586AD50218B628D5E479
48E648601AF3C2B62A39D506A31F7E3106A2E0140760F6614120F5B544F49774
20B0B54D346B7300D5434B94FCB12AE62656E05B2B9A4F093C50E34D22A5627C
A8CC94606C0BAC8FBF89D9F24268D8CEEBE90A315A7D81F1D77BE6CFBE2A27F6
0C7F9B18D1623D2698C086CB454BAE675BF90095345438C0107803FA2AC98750
ECAEF0521DCF02174A98BCED87D2496926FF7BA1B2E7D3896732D9324EE9B073
38A1E9FA0D3B44D9E5F77F4E6528E32BFC0A9C36D786A51FFFE20A7B277E11C2
EF7811F0B82E013906052477035697D35BFAC4ADF90CB4C7C788B2247B7B330A
CE3B6A0D4B04E1CAF40B385826EF14EADCA7B1A1B79DE04D5D9B73561BA34849
FFBA032F285072CF9E85957938E06074CC35D5E702053BAEE028E2CBBB17E290
7FD22206FB7B4213053435D2C378C03973338247BE071B406A669B8F5402AB44
5BFA656C18A7BA6E9E6F3A861C45BB895996AB95C0AC1FAD2267B2F4FE1B4F72
2B0169095B9088D8586C2118FA12B28788D1C3E6A33EBE82268C7D36031AF208
167D21587EC7ABDE2693D98B6261E83390691782D81B0B04C4845B537B682442
F4A523A9E3AE9911C37016AEBBFBBEEA2A0767ACD2F11AB04BED3E89AB627B96
F0194585A8CF4293A836E552E6F7A1E159504C4273C24592791777AB3C738B12
F0C4FEC83AB0619635E355C998D6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Bold
%!PS-AdobeFont-1.0: URWPalladioL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Bold) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-152 -301 1000 935} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB42B05EEB99F8B643CE3
F4B6449ED5A733594F70CCCD7BDB073E630C93A502476CEBA5741BEEE5938FCE
3E77996A2C56EBAE52B2701DEBC95E363E995ACEEDFD1CF8EDC72768951885B9
84F82225B3BB8E9522E784197B8AF13D70B2CD113F7501CD9333EB9A28CD9D56
824E9A3A689741D4577777676015723D17033D2815122B32062451E15DD271BA
6831FBB953F03DB40513901CE59ACCFD6C2D6F05E2B6C8AAC7EE97D4C56B8F52
BCADC9DC83D5C7C45F5C6E60DF9F9471D42B1D6F45EF98EBE41997BEF7D56981
8F9AE898AFA16089A91654ADB0AE2631539262C43BC5206D6CB73867B19EDFF9
024F9C3C7D790946F34742A688BFD183A1307649A36F782DAEAA2D8E581C911C
B42485441FCE5FFBF911F1D9988FC5C601D09514633B415378648CA65F2D6F40
F7CC23901787522154CC33941615849C4E5F2600BE11CE10B78AE007EC0E5137
4C66EF207977C2C2CE5FD8E70A74DA9968C71790516F1489FB5A2585DF9F5E06
9552F391999992E23975398FA0F539A299EF090B9CA16E940104614A4FA8C6D3
495975F6ADCA90522557B3F02FACDAB68EBFFBB8579876F09895D723E482DDF4
FDAE645CD275F3A8DE44AAD1D4C2987B6CD35FBB18312851D858E2F382FC606E
41B7B9393EA57A7FB9903CE835BF1F8E67C15EC8AF980D14FAB1A56EF1A62E14
5433A36160111440DE43D4C8F28013504ABFA5BE40DFA52D34AF251629A70368
73B22EC87849070CC52FE3B74D259E603996AAF50D77304A8B6631C652E482D4
C36A5EA242B3F6A979331BB593EDF29F2D9DC6B35BB39A5876E5378E71CF09BD
151E4B759D53762BB109DE5D452919DE87197C14A816E6970C6476C8A4F1BE28
E6FBCDD677D4379E9D96A978EDA97A0F256534A641017C46F0637A6886CF10E1
EBD75689D3CAD47F1ED6096F825036BFE59A50A550F0FCC978EFE560113A6231
60AE7DFF1BEB6846A97F44BA6196DFF0E9AAAB0F3F34EA25A98ABC50DE2C1812
47CD8A7E2F2BFB159544B845133FCD3B9F46D1C48462A806E9E614D5EB37B65F
BDE52075686731382196CAC3AE3161EBF89944F88A19A5CDCCA280C5A47CEDDE
B826B08AC1581B76BE95036D3797DF9D68406C79A4B51ADF64776AE9BCAA6D51
1362E7A00FDF2C9A6D40F64DDA4B706FAB728B6F6FA9302B4455661480719E97
CFB7A10536081E4E417984862DAD762591F1E352EB919871CFB3DF2DE4C2D6EF
57C8EEC26EE1DA7103209D30974A40872E926DE4FD979C952811FFD7310936F6
232750BBEEC49A614B1869F207E63A1F0A0862367A24EABFE24B42B9A6EC827E
C5884399B34F9D99265BA3D393374B1C7F40A63B5D9247DCC59E67DF996C877A
C01C96A0005E969487333BBC6A692E3E47A24C7BEEF7D41A1E5889C1CBE8580F
72167FA68BCED771639C51A948ECBD104CE006A266E189A3F9D0EFBAE6F1FBC2
925142E8E65AE919A5A44098A7FC1FABF96811B299E8ED436ECBE6561CDB1313
A81A1763E4217BB335A946D264065010BFBC92A51D5F7BFC4D8144C63C9A0D8C
2EBD71F0593FC0D0C723E89E9DFECF7D231578898052DFC1277C8EFFC30108BF
860D260CD5F06C23B554C96F68A42CB4211EADE5424E367B1B5E0168A1DBAC62
EF5ECCF5623D5D79041B7C4B28CA083FE96ABA
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: CMSY7
%!PS-AdobeFont-1.0: CMSY7 003.002
%%Title: CMSY7
%Version: 003.002
%%CreationDate: Mon Jul 13 16:17:00 2009
%%Creator: David M. Jones
%Copyright: Copyright (c) 1997, 2009 American Mathematical Society
%Copyright: (<http://www.ams.org>), with Reserved Font Name CMSY7.
% This Font Software is licensed under the SIL Open Font License, Version 1.1.
% This license is in the accompanying file OFL.txt, and is also
% available with a FAQ at: http://scripts.sil.org/OFL.
%%EndComments
FontDirectory/CMSY7 known{/CMSY7 findfont dup/UniqueID known{dup
/UniqueID get 5096648 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /CMSY7 def
/FontBBox {-15 -951 1251 782 }readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (003.002) readonly def
/Notice (Copyright \050c\051 1997, 2009 American Mathematical Society \050<http://www.ams.org>\051, with Reserved Font Name CMSY7.) readonly def
/FullName (CMSY7) readonly def
/FamilyName (Computer Modern) readonly def
/Weight (Medium) readonly def
/ItalicAngle -14.04 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 15 /bullet put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CD06DFE1BE899059C588357426D7A0
7B684C079A47D271426064AD18CB9750D8A986D1D67C1B2AEEF8CE785CC19C81
DE96489F740045C5E342F02DA1C9F9F3C167651E646F1A67CF379789E311EF91
511D0F605B045B279357D6FC8537C233E7AEE6A4FDBE73E75A39EB206D20A6F6
1021961B748D419EBEEB028B592124E174CA595C108E12725B9875544955CFFD
028B698EF742BC8C19F979E35B8E99CADDDDC89CC6C59733F2A24BC3AF36AD86
1319147A4A219ECB92D0D9F6228B51A97C29547000FCC8A4D9DAFF1B3EA76067
C5493B69F73B89C8B61804A34FCEC826343337CCDFFCE17BF343EA8034BF95AA
14C56862C2C052569AFB236E1F1795F05150C8F28DFEF6BF4BCBACB678D00036
30EE84FEB44B1A8438185EB45654E6853C1159B073E54292D135F0961A64E8A5
AAE49C4BA9C44156C123426212120F99F3E8B7425752A5FE384AAEF755A8464B
51F015F9E2967477D57B22627D75CEF8AAAF0AEBD504EB46D0289DFC8D86C972
F042BD88A90A53613DD93D8A7A8460E63D85F6C15C000C0AAEE4BD5130B6E668
8C9B3F3FFD804745DA1D5EC0AB85C96E1724FA67F9324C59275415182AB48D57
9722DCF602396AD4B5C075A5A89A5D005C9FE11273E5FBDDD1800F11BBDF6AEC
6711C5633A73AC5DF038BA521AC492E138F7FFC7C5438FFD32FEAA1128C66E83
0D3AA40665F05E62D7EF00B1B0596162C402A34B6BAE6300D43F3DFCC84860F5
C0F0F1CE28FC60642BBFE9BC9102E80146774CDC88F9C250DE762D24A3484BCD
1D26B6D9FE981CA5AAB2A4BEDC528115043DC18D7105735D7528C2C5DD89A812
75B5D7B2E5A586FBB0C061E708F92C1552F64A296490BD0F20243986A4707FF9
8AB3C917B8DB92F19DCA6B9D4A1DB57515E51DD85D5C9D2CAF7A036AA3F9E9B1
5B5E099CC05A9126AB274C17D75CB4FAF78052366D2F21EDAADF84B22A2D645A
3E65C4BC0F540B5D9609D88DD0E4CBEEF87C16447D43A5F98528FD45ADD10DE6
41AEC411FD6929308F0E4F48A8D9C9EE386E920D41C1CC98A52073011DF5BD28
5683F280B5CF7F27DC50930C81D344FF5A8A9258A207D2531AC21A735B14155B
C22C752DD22AA33C52D6D4D053B3E46FD4C9129068DFF52695A3A9184D04E8EC
93696A3FEC3AEB3814D9015EC14C22EC3ABD5070E8C28A3B42F5596D948212B4
AFB9978A0A361135C9E18CBDC98E0D1E8BDC17E25DDB3D52E86127E5AAECC55D
FEE61693190E378978EF1BBD4D1AF005D511C7607CCFA4BCBD3EC427CAD82809
B725B25AE8A03EE88F80A7732A571A2317E0B6A0D072EE8CE2EB9E033CDCC899
B64CF4FA1C708A885442062F08D3D8DAF44C066EE278714D1486EB709D327865
A483F62709E89D08291F044325208EBA758DD459481334F5D9AE3BB61B3020F2
A4538CFC2C94BE84C920BE80806FDCEE394230730E049333A7E16509207514FD
695B5E0AEA9E4A9737311AA0B33B15F6769FF865D1ACB63DC6201C3F1062A3FD
1B446C1857460745917A36289DD57C94FE6240F4A40FBDFC10E91B91B79029D9
9F1B9C74E8E5AA011A0ECBEC660230AD5929F01D0325D15FDC0040406F124021
02AE176F4C98BAC1706F03C2B5B40F325A50CA4683B2BB4605E68E72D0CBDC2D
96B3BBCDD01201B650A7E7744D58D1E36D81FBF72E0A875FF29B4C109A1950FC
9621B18D58806392EEE9841794DFD39E3C4E20D45384FE07F9D445F143B922D1
AB350AA6DFC51FCF767B141A392D6A8B633AACBCEC9F56A0CF40AB08020EE63E
08CC0BE01B40E86388A65F5869F2F4D022DD4B912031CB8CEDEDFC2473772569
5B28F66AB74CD7902A0061AA3547D13C7F0C6EEEA7B0BD316694A94E4D672520
EA044AB28D8D01076C486CE456EDA1811F7ACA75D27473080D27D3E681E35FC6
447046120C6CC4C17674F0F051570A79DCA74848F3F300B58B19018430D99858
CA5504084D6BB74CFDB635B6866974A9AF05DF201C69352B2663B0623E7828B9
5EC5FFA8D8F10A7C28000F8C679B180067D5481D6315BF1C4194EB171C8F3CE2
4CE319975B9E948D907F9F7EEAF07089844391555F329E331D52FF114668B8A4
80704B3C6AC0CCAA2F5D043CE44E65EDA89A0CA854CFDCB11D549B7FA72EDB90
D35353C34A771B1FAF96F83FCA5258AAB65384BAFFCE448690C1432A1F749C20
5817205185F973FA098BA856584753E75EBEBF387FC155202885F5B67117DD7E
70D1CD887183C5573B6FB607D4F6CC9F8B94B09B3F3AEC2EF1E6A320CF6D0112
63046321941D1FB3F2140B59370AA9387E24D579D389A166A10C989497FE9549
34E1AC2E546CC06C5308460DBEF3E1AEEB6CBB0FFDAC458E61DE3391480CF5CD
34A647D4DE15B81131B7D1F9EED4C6837A32E89B0EAAD6A05F5F67518655E5DB
224D4833CEC60D5DBBDB8A03FB1A9730589BB4F0FF56191D17E73B9562E0C356
B188882B36F9505F6F42EB2644FEE125C2A7D12227ABC8ADB924E88B0A9E8DC2
79762523B0B88DBBE6AC7968A46BD9E9F0C3F03F5F64724CA07782195F01F130
30DBE895C212E0EE20162D863F46A674D85232FA0DEE69A8DF019794AF6873AD
9CC2A5EEEF9393313CA519BF95C08ADF7A75B6F53EDCDC39851D20E58B97CA57
A7523717AA1821DEA94C8A9F8B82346B16D92D15AEDC16F0011A45A44B09DE47
08CBA46E8511D0C5CC83F952EEFA4ACFA7F3D7FA5E113EF6B70E5ABA6F1AD3B1
E4D3B15AC6D5C3BC70A3946F411A7D965D6FA9D7B6C6ECE19B2C29A2FF476251
EBF0CF3BF658A1D896323706172746F58B2DE49F8B7E431E20304A42694CCF73
11C4E9E96260CC442E2938A1E27EE6744C7CAB01634C8210CE40488B9CBD757C
4277B5E3E43C7560291D945F9128AF1F85924003418F96458ADDC5BB8EC431D5
AC9093D20DEA69B92454613BC1A82DAD4FBF8E56084494D9D2FFABD82A7C9847
171FE36B265B546F3072B0923840E6C6BB12CA53E05A99F0E8FD4F5109782746
7CAB9B35B68050230736AE624B7862D1244C7D9BE4D1CAAE21B123D1E8372377
F1FEF269A9A2EDF02CE0CC8BF92FD7EF09556987B8A3BF6D8C0A663DB6B9742B
E9AC61A449106AF1EA7ACAD40AC6F59427CC51865E6A90CF2AEED8D6037BA70E
4ADDAF622CDE877C98C3B2006B4721FC9BA18E30F0752BD4ACE36221F5CD1497
8FEDA5D643BE2EE007970A68E53D85975116E6CC09F0039A09EBAF0CA4B0EED6
A485CC0B69E526033FD1C1190BC5686739CE13D1AE8EBCABC01FCFF26141867C
44ED291196E546369129B9F759FDD7DC21BAF0A528FC34BA9FA8937813953644
C539F9DA4E55E83DB3D6DA309C562DA1330B157957B18F7618544AB738E25F16
F0517CD13C1F11BB8EA056BDC575D77CDC526EF497639DD89C2098660C5C45B2
D7CF715AC5E76847E0D3178360DAC1BAF6ACAEE72453B845B9F86621C166857B
029CEF5AFE29D1EDB4CA3AD7D008B7550A779E0066D7312DD6C7AFE1C0BFFF25
7B062B0DF30032EA2A2FE3CC46C96A3A0BA1888D1D2B05424A59ABE3EE928ED8
B67F507EFA78AE128F58B54634C7F534B3D0F4AFC23E38FB56EB39CFA425FD37
848545EAD03EDC5A9E796CEFB345F527615C785963F536972EBD9CFC4A6A4A07
5A31A508CA147FBB762ADD198CE36DF86730FCE2B643D1E7DF0BDE800DE7AF89
44A36B04193E44231E08919EE91A8B559646DC4DFAFF0AD891890A0A88FFA8EF
B066BCB7AFCA409C51889E7FEB33F19A3CB1268BD0EA74AF29C1401BABD16F87
ACF7DD65A8513DA9995C5092C36A774BC4260113360D29AF7ADF5D22B5B58E7E
A9BEFC33B9A91D2C397B27A81087376CB623318A8362C3FA9CBE3026675723C2
E711910DDB328E0EE3FCE219F44FE528B70E58B8E6CDB4AAB48237DD933D9639
E9D4F9EADAA8D46537D964D75C27F210B0C2473CB60D65F61BBD91ADE01576BF
77C49E31936138B0FBA066BE910DE1B1F0E4FFB5E81038E8656ABFF08DFD923E
6BA2AFEDCE6998BBF7045393C34811501586A4846E5B942C8E99D4C481D3AE60
2796ADBB5242D59F1116EBB828014BD903EF58B223DFD18BFBAAE4D348876B06
CAC10B7AF0DC270E6702A3F75D4DCEF872F2CDB9470AC9A1DC1ABCB55636D26F
9CB6BF27A0DAEB1F62AFEC12F55F78C9B59AC6DA9DB4B45444B0C582DB4DB8A4
B31EF4AFB77988E92FC0B257374B4408406490D9AFCC495316D6C08BEC9A76C7
12371E14417711EF802FB7151B3F6A2580C97527C9C3A0FAAB8D62FD992AA18F
EBEB36F7910186CD5F70A55DFE932757C299D9D2289796769A00A0C6ABD18F82
E0D4E95D6477E67B4C012DBBD098FE20E2F15C412DD2AD5471A65EACE05B3A1A
0C9C430BAEF4887F2CCE668116B87FFD9DAB4B9B3605CD26E6B12488058AFA30
8843791A95BB322DF5C47387F3EC72343855D6B23D72144EB5EB5157B8B238FD
6C71DDDA64C9539F66A7DD569FFF43DBE4A8F0608A3CBD354DD9BAB5E3C756DD
92C3C1B3E169D86A2230299432488BC04A87E08A80809F9968676DF9157B1C91
27C664ABCCBA9997FAD8966F766B325086899D1FE44581FE07C97688B3E15B0C
234A22646C32BB965B9BFD2CD34854D1488AAF021E169BF9CA9665CF040E25A8
16156C80A2F47397CD370AAEDA731E0D14FBEE1E51A17DB972D96DBCCE33F937
5CDBF1A650BF1D3536BA4CB7A1CACFD5CB457E2368A660A62AC26E64A631B2BA
6B08EBE42E02D9B1B2E95BF9F0A6B59C96A122968FD46A4D17BA3D018CCBA0F9
80BA3C1E6C683111AFF79303CF64F1D2CCBD7571C6E09DD9B27B8E101BE219F0
E075880A0E367885AC94143E777DAE455B990383100EADF786300602C2CE28F2
4F44662FDF03BD39A5181912D8F1243C36FF88882CFC4B34C1D4EBBC01D96A7D
9CE5303042D1B21042E4FEAA455F22A01333FCAD7E4AACA5D3A5386331985F6B
9B247EC6310BB07507321BEF3E4ECFC3B915AAA6E029B3999644C987640863B0
5DCF58CE479497AFAD1208FEFD1796E74467E9F7867C313A3412E6923F4C9144
C69EFA17965056DF043DB465BF2F1E191706D3AAB47E6AD5C9767E4A73B29F2D
E2E579D0262237568F82B360ADB6D0219B7535EFD02DD0688CDD23D84FC4F308
5D2D0010B1A9F4F0321A00C154672D21708B66B91ADCF98BAC7A2F94848E9A4E
86CC82EDD0399BD9F13E43359E71F80086B9B0C3B6D08831D4479ED83E7892C4
90C477BD1F06DFEBBF60F26516EECDEFE4787EEA8683754F2B257D0BAA607DBA
35EC6D1618C2FDF3881827F92D793ECF152D761F2423A96210F582DC9B90120F
26A33025414716A5E6F56D712E31BABE5047EC4855B767AC63D793995C9E074B
6E35C7E5255FBF4C3F17E7AD7B2A6C5F7459794FC94306B581536910F244BF5A
3158E821CE75F4B0565EBE985DF24DAA92F9C1D848EEC6B88E21FB6C51125872
1752F7352291960E5BD36F78AABBCF6DAA4D07AF56E4B6058AAB13D41BCDAA14
C0D63C6807FCD0E2B4B9CC892F224843173A75DC53A8F0FA396959C2E2CFE3F5
9B1C8B62797F34E7A0BFCF0787C73FEF98442234A617CF161829498035D30B29
ADFEAABD0B496E8A2E764D22DB7737F950FC5982F1C5F4FD414C1B0202F40FBA
62C81B8F0E836CD73D79366FD62388B437B81FC673442EE34BF27454F72A08F3
389E60CE28A050601A42FB4491C60DC02EC008E6B9DD2495522BBEC7293E2923
120584E88412DA7137397B41A28706B1CC6BB0C80709A2A4BA79822D245757A4
3EE454198942ED2316FAEB981F7615E642167620EBDDC5B271E273216EB119C6
4F2F0412F0BA6E3BA396217597575C6739194E1F839232FF088FDDFD3695A5CB
9A0E220389938596D8BDB183138E1F73F64512E4FAB5E1328F9B42364E3113B8
004BE2CA0B074EE271BBE0260D31CE555D535C16EBB528747EBAFFF253E659DA
3A377CBE0B296276AACF0294CF90FDAADB4EAD5E2F600E5B2A018DEFB86FF61C
84296480A425687CCE37D671472537E897AFD4B8C6A6175E1ADDF9AD24DFC5C3
A73E18AC2D9B28BDA2F17D51DB3521945850DAF0EE48B0FAC271544C1B4F3B2D
53BFC8DE32BA366FB1FEC0DD6C0B1FEA374CBE2B96F5B235A1D83A240DB442C7
1460980A3E5B96AE3D5784DE2C2DFFA671E0A856DB2FF4130E5905F3D5338856
C11A468D867D0C6EC585F1AD3E7164B8598BB59973B9A952FAE819F052A6554D
EDC342BCCB0525905D1D27ECB9EE43847B69AE116F494CB2DBBAFB2773F1A3E1
C75FBDF8D66FA5AB4005757D631A0D9424FCDA91A1D2AC6FCE7CC7A23E84C65B
3E92BC684F23467DCF8521E0E27CF1441C487EC6E3BCA0AB54BB137E83776009
833D772FD225E88A8BD992FD69819B3BA90BAAD1DDF16E4326190CC4BF9C30F2
AF7CA1FB38E6387D9745FC5E176B248B1581BF7A4CA2FCA8E423DF340EAE29AA
7E07A25FF838F67378F9A6A9A0B404E01E86E64FEF71DD3D540D4711AEB1974D
E2E0D485DAFFC74BA6B8E9AFDA245BC8997BB39BB6BD52B496A09C68F7A8E900
8DB3007643416040FCEC85B407EA0A946827771FBBEE49A3DA5542CC5173A31A
0280AB8E922C23C1BDD88D70627EF124633C318E7C9ACBC14AE216BFD41C0B6B
3A0161757913CA1F7B6626963C09936A52E73DD9B3D86DEEE73C0293A646FCF1
21D4C33DFF1671DA7A53E77E20233EDE51571549AACB7968602CD03EE67ACACA
B231661CA9DA2BEC5795A83DFAF675E9B052C8BDD51490F7874C91EF5ED2E0A6
BE9CBABB98A950F7E55DDA3823036437C11F614E27DA5BB8BC6D955FFE54B825
0201275C2C49A3908BEF1DB3D87792DDFFED23DE7FD9CFC284F6255C77E54A39
C2FDBCD28F2938E4CC135829AC1867CAA5705674062C9639FEEFBE49D6108091
7C58585B80464F7E69966D7933C7019BF336B88B9E0E7073A85EAF297B71B303
31EEE9121347A482D28CCE942AF53E94F88A97EF2F1860A92CE29A14495D67B7
D37E207D42F3891E0423F5BCFFCAAC057FEC683696ED6FEEFA65C8FB6F1312C5
24A1130192B4179F3B08DA1C951D988894E7FE7CFC28C56992A1CA82BF8BDBDA
E021F16E630FF67201BA4DF5F3F4D6AA65B8347FC1575C142C6C1868E8472BD2
CF191137AE1B36F32FD84DCAD50644AD55EBA2694C93BDF984A5C9E7C92B73A0
26769F00831537266FD2E711AB3F8AFC5F3FDA3C9E6439FFC48C3D1B5527FC56
1FEDE991E66E8465C0E395EAD0A22A2FDC001E449AB9C5E0EF187A1DE9B74696
BEB6A525DBF3A60DA2FBF1579150DEE1C5D1B6F55FF2708CE23289803CE123BD
C81E25DB96551A13AD713D5C7BFDD3F2E1D5C12463A195442B51909CC1724E50
A1F6F4EADB3B7355908F36F88521F333C4E7C70B094209D1F883B961DFAC32BC
8C5A2CAF77CA5E6AAB714CC0AF2B42FFF6F73301FC71AFFA9B33A2153F55C2DB
C1C111874DEC37CB746BEC9A3A9A37A2DD098CE7C66B0FE38460ACD77A47D53C
1550F857FFB733B5A8D02FB56790A09190B29CCB4F4A3058B1C82F0CC5E1B2EB
2F8E06F2DE531E1EB81326A8EF0F82843A4AC59D267EEE45730895752820BA93
A129C22A78C1AB28BCF67AD5DF372FECC9EE6719A02E499FD5CA866688E86089
7EE8E5912087E0C4588DE38428114785E0CFEDB1E2EE24CC067D107DFDF1E2BD
B1C4F9C6B740F3DEA0BD315581004E851ED5A9F66C4F9E95DE97D355DB06F482
A43B565F1255A85710B15A281E2F034B1C23FEE6CDF3A043780CB6AB18A016F1
9EAFE545CA5A5B5AAE2459D69D2151E99D029FB5C1649B9DA784BFDF7D177385
4D8B16B9922D149FFF6B4F99311D52BEC9A9FC098E7192180DBB38767DA9B9C6
E8CFC98615219EF3AD4A8157D14C72BA3F91C8B78381383E0BCA1A5319749B8D
07C9A8BBB76C74F0F05157151B418C385F2ECADE863C977BC1D0592216FF2843
DC1BB8509D9BB8356D008D7449147F456517EDB169678E28B2C0EDBD271BEC30
6E181064988515BD2B3AACC6D45DADEBD4DECAD9AC58CA06A6C9014B780C53D4
67D0FE46560B44CA4FF989A4D77F1B8828BB42507B524B622F10AC8781B19CE8
AA275F9FEDFB3036079F4F10ADC8CA8FAF5F5DA7088996FB632CEBD691C1F29A
FD52CB18BD258ADFB0B4B8B80F857B543BC64BE31FC83D5ED0A4866444501B5C
C98E1CF0A452E886EF57A241A093B769BB09B19B125F334D9D374A9C1B6CFFD6
FFED42F77C7624F8094CA624F45801B960F6E145D9623ADCB90F36C0C273C5B0
6E0AA4E0C95CDA1561529F446FE5489523B6E793FFF58C9DE064BC47635CCA71
AA72328472FF6822BD62A82B7765A73CA0239A9E28179AE7740477196602ABF4
2EE916B80AAFB638D00C1FB2A1EAFDC4516C7EE3EE4F5D3039E70EF3B07915B8
7C9C128C2ED3C27FE48D27D39B41E1ECEC46CD2209D760D75E743AD13AF1E761
A8B7F996ABCAEA43645546F42C87F6909258CC74419B96A39D6DA3233834894C
C60B03F867B6ADAA2C18F60040A9D8E70BAB12221217095DFC57117CDEB536FD
A09E11787D4F7B448F88
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: NimbusSanL-Bold
%!PS-AdobeFont-1.0: NimbusSanL-Bold 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (Nimbus Sans L Bold) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Bold) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -155 def
/UnderlineThickness 69 def
end readonly def
/FontName /NimbusSanL-Bold def
/PaintType 0 def
/WMode 0 def
/FontBBox {-173 -307 1003 949} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AB7B8D62A63193C4AE94C086C1
552833DDD8F116B5DF33205AE709B3AA63DA7BEBB165B67281827B48FB5EDBED
02A1A5C0784FC57D3487DAA59520BADA1BE3FB9795669924321CE4F466CD8E3F
7E8EC2494AEE80E2DD7A48A6861AF5B9F0CCAA4A2FE2B03498EACACD6B9C39C6
A8F2E39E06BBB061CF2EC380A32EFAD0B790974BB5CC3DAF0992471456967362
77DE34813F27ABE99302F86BB4D293A37F84667E7F3DFEE4CFE9D1A676A5728C
AEB5222FF50DA97E74B2CDEBF725FBCA7015A188891C8A376B9DD8A642C4B184
B1BBF3F376A6D6E31EF1C8354DDF8039CB20FAABCB34D4749B3C8C8D6972CEB1
06B8A5AAE3AE40A91F1F2B1155681A9CC933F87528C99A2B0268B43A3E829E7F
3BD863CB52950773BD9B0731DC4992541D7DE7A055CA65DDD2317F1705C20D1F
93291BCC254CBABA425C032B3B15050D41DA14FFE1B3D684EEA428095A01E931
98D4F849B239AD9D79F4502F0271AFFB0C297F2F347BFB9C137782646F648F77
0076B85F5A929FCDEA2703333F6918B8F125627F8B505C688E30F258DED1AECF
2C86EDCD88C29249A8081731737195FAB7ADBB54743BD66511194DEE2516959B
A20701E2D97342248297425491F6C9471EC9A98E630D734DAC19721F0B324432
C8D7A0B751453F89F7008BA37BC48E0831EE3ECBD8A0A292D63CFC890B28F695
9E29AC3B4DDB78A6883B9272CE34A012A82ADEC0B6B641E3940A438A098CCFBF
C50544B94FACFD9D7AE09AD0632015F81D2F77FC6D80A42EC11D67D8A91C376C
13C8E3444CDFDE4D2A1ED021410F4D6A4E97804AE949BD913094D23108C9D384
56F11025E2D24939114B6BCF579A0315C52F3CA1BCC2860FC1A0B9FB8A37AE2F
C20C0FD44D215FC2AF737FD0339B070D54E664021240071C665DE4170DFA182D
4E385685FB41A2D85888B1149E9A766CB4F309B4E2BAA28CF1F8CC12C1051F17
7F2E8FB0269F00A8A4C9F61FC3EA50B8009493921D920566ABE35A041D01F286
5E2B3E574A9E9A78E86BB5B788713FB8001C0435A2AF29BEAF8B3559A6C72748
CA7C539201BEE06477DC22B9FACB1CBD29E5647531F694BFF0ED77A7847F7C74
1A9C3C1FFEF085A5A87B2B8DB8234F076977B28129676DFED92BF005A132A12B
0D5D3B9A4AA4A2C04E1AFDF8A6B5866B606CC19287478BFD6B8B213C19B39853
2835F26AF7F37F7F99E30BFB9F66A8A8833F7D42174025AAD93953C9F599E8AA
5B732D60633B59C2DC5C080E7881848222220A63605F00205C205B35DEFCEDB3
2E261F8BAE46654CF523D136CCE8B52E83BC623D906EC7632CB075B9D013C926
6B223C04EE5CD63D144DE465DD11AA26F59E2B12CA1CD88BD95ADF73CC036BA1
DC8D789B86226E38B0DB3AFD1891643DF69770905D11D3022EEEE058F0316E77
0CE494F5D25F4667FFDEE2AF8A30E836B33CCA7986436F2250BA687F453D4A5C
F4E61DA5C2E238FAC478170AB546E2F49FC971F94007E7CCFE301062DB793BF0
C98D73A11770D4FAD1B1B8D4D0F6BBFD2C717646CFED93889EB779D89DC56574
6F129EEAC3CDF33EC8821B502104FF31590F567D1D45E3E92FA14AE1F634F3FF
687E1FA14432BFB817DA2C19F0C868A3487600CB5DC8C1C1417C3167002ACA1C
42FD6A3D4358B8623588E7D3EE02742930F99516B2597A022D0A53242609EFE2
6FAC8DD9F8B47025E7F7382C9A9E7F700F306AF2E28A1E1E66A349D53C5A5004
547D9E93E0A89BC49059B8112CA0DE3C6E33CD720EC4BC07E03072267E8ABE97
69AB6F8A4D5C2A8B0ABF3FD27F2823662C07A80565D4311B23CEE3EA3747DB06
6241C94302FBF237C39454C67E01F68736F187FA748D79F84B7CB450A9C45FCC
932A106B5B2AC85293A25872078E4CAEA2436B0A872F31A131A36FC8FCD291FC
EC5A6398F275C8CE4CDA5E898889277F0155E365B518E36D76BA889C4BB94D6A
F4BCCF762EFA3343D9C71DCEBA2CE212711445CB7F88B44D610E558EEEDAC38C
BEE1908987F62A68AA0133ADD133473E155533410E7973C55758853247CD330A
6B61E039648CF6E58A173FC3D7E1FC670322A4E259A6A165FA1558FE561A784F
A50039F200BEDCE7F57392C3D41C5698C9C8F8333B9CF307E9154793EDAE22FB
A40092AF1492C9BAD7095BFE6125C188A53FA2D0813AB238367A14F0ED1EAC26
E444B6BDA89CA11FF988ABB796B6595823707D1A37CD0C8A8B3F7C3284ADD469
2AC17DF0F50CE04DB21BB8B276691749E2E6F9BB3074DA40AFF782CB25E02AC3
566126F3605C5D91AC7F8E69FF15FE9F998D6BDCCF481FA69BB6B02740E8E674
BBF93E87F057BC472913D788E66AD436C8C5EB667A9E200B11C78F1226D5941E
BF08A7D237E81E39B47A6F25B2EC9290B2883555ED7DC703B3EB5C0F679227B6
E811F2C38700DC5D6EEC5223F0FDBF80711A377649E17BE3301FB1AB1AE47128
7800936B812CBED8EC4E0A114FF329C5D7372EF249FA82D2745ED89D47EB2E62
91A6066F1FE1971379E043F280BC4E314A0EDBBCCEB0029773C9574297BF4E64
D19DE34E73FE10D63BED7FDAF89910094CBED95E1E0B88C6A32A3A600D9D43A9
6B9D1102CB26CBE3E62D0410DA79BAB5DBE07B0A843F19B70A1E36D8E39CD804
3BF8DC51096B86BE18226D966A6798BF0B806FDBCCA4518DD1E541D722311B5E
A81935F8964877EA225920F3C7614CD6E9660D94B695125E153D94E058F3B1FB
5B8309A691332BDA82C4109E89E733A74374F9536FC268515F6F307E59C400AA
A9D4A555A2AF63A060B6DA36C22AFFDD2FF708C1A4AB6F0419F9F693D459C15D
45CB50480AAC4A6417ED2D6E041FA990D2800BD436149F76989E8C596CCC628D
7AE7A911A5ED5DA461D25775B0CDBBDD9BE156186BD5DB221798058E16CF0AA2
F0BC4976B60EC317964F2528CDDAB4D49A9742D6EE0D2972FEB9C6FF837BCD9D
437AACD7E833B9A997CA465E88B3C6BE6E884518E97D1F69F6EE5C0591618E92
3390209AB2550FF8CDCBC94847745E5D1AB1E9F77B0F4A5ADA6AAC4AF5B21906
B6E84D094588F9CD1349304B2F9EC45500526C7CAD819FDB734187EC45896AF2
EFEE471AEFBDCFA77B04FBE05790450C55CAC1E604231E3E61D172148F9EABF7
56E05F715A5315338FA6E73ACCB29E973639E69350045D6C39603153EB8CFD39
95AD4EF23AE4E0B652F5FC546CAFC8EFF16F8EF4DF58E7A22B440D8CF1205D53
76CE005F20A228CA0F77E108972FEE2BAB71FCB7AD4FBA4512A985649707D349
1BD07BC10DF8BC4346A3EE9254174512D9B0940FFA97F2BAAE7C7E464C29F2BF
B06CA814AD934BEE98A8F2B43C464F6FBE67ADFC4B48DD83A503AD5C787C37A4
419715688F7A7AB477C002C39ED8BF34725B8D3E16A88A2C6B8C17C2867E5AAB
B2FE17DFC2ADD8C2D299CBB710F342C01EE67D98A78BFC11246FE62B38E030FD
F1E26BEE26A7165BF37E239CFB5020DB68A15951AD8234EBA5D130DDAB639886
6D8EE9AA635D6245374A3C18CD6904A2E532942A19F0512A0B934DBC586BB073
5B06F5DB60789647311A16C78175C1418B5A5AF991DAF15F906541FB5D15E78F
0848BC6723AAB8C4BD004547C597FB78C6FCBDA374ABB613C3D6D68DA8449B10
2B4A3C4F4422A710B0E857532D2AE9C83DC2B15DB2DC33012FB2612D647CD2B6
F590A90F42F1C8C31ABF0B11A8D2B044BCBC85E9610C4F4E5810C493EEEC7F6C
89A96BA5AEB9DF4D871BFD5532A63424DFE24148CA10882167F1B26ED72EF7A9
407B98514E1B8B0446E922572FD38CD39014B907203059BB36A10B51E96077C9
CB925A84ABECFC00B4212CDF4E88876C2DD4E7980C46BAEABE84B14ECB5C4402
9F314242067340162B8E339620A52776770935A6A193FA21A3DC25DEE6E7FB51
D65779019E678CC8BAFC026639CE00ED9FD2E5346FDA4604790E97B39E274197
FC6E23FF8368C859F645F39F52077A8589EF54E9940E8D4CAD60210D087F55A5
CB694336732534694A184539909D5294C6C9E27058FA600C8EE798C5B24F5EC4
370F3F71E5D60FA8E303135E00AE343882AD0796D5CCBAA6F264F625BB6B3762
5FC01908C10242731B79A1A82CFCE9E17093BD970363D0CE8E5689A80FFBD7B5
2E6E8D30A143105BB802627DC136234B864511588A5FDD493BC57D60F02115A7
D25AE63F1ECB7179CADB1E8BD87FB6AE8C545D984710ECBCF413D2408A311A68
59BC8DC62BE1B81B4BC9D461F72771F746CDEA1DB522CC42C37283CB75521057
4E3C8DD3C30AF5C08383695C0E550F522C64C0A14E6D3583F04B688A7647B011
561CE38F614640AD7328D65B3106EEBBBCB23526C685837707BB2AEEC6AE40D7
70CB88254C75DCF977420C20FAB4B79BF00D0CA4B0D9C960AB1EF0B82A494140
4FB4F240058B592F31D9B197F8CEAD85820F5853DF91447D193821BD9737A22D
4605E10BB31310B68ABD7295F455008F1CF5B88FBEF99742137438E51623CE0E
21C278C4D52B4A8B1AA257C2DEB9689E200925D85FA2343D82933FB596832AA1
8D730A55B80EA224ABA4D376DB296C88DA67A92B90A9B4E8BB7A7729BB91A865
A7338E6C7C0C0289A1BAA29D4467B2EDB0A3034370710DDDD6BE2EAC235BEDEE
368CA8B609A0522D5180F671DD269C08EA3961649C0309CF1E532885A495990A
9E4AEB65118457D5C4E806B2A97ADB2DD5A9F66C4F86BF2E8521474FCB68D8D4
60A41B61369BDAF6032929EC5E2F884193E1D5FDC28A8A7F6FA6EC89007816A4
E036BBAEDE1CCB9F8DEBD21E86825581E3955A5ED6036243002C75ABD706FF62
72EC8B127F512CD94B4EA0A925E27CCD947D1F6CFEE8DC598C75DD30D8D8911E
4EEEED74A6A15ADCE25EF355A33F5384D64EFEFA51409FC45FA276B47032F9D4
B7069C8225BFD804EEC3DD6A8B2B6DBBB87B3DBBF64D372917CBCF0FF8BAF3C8
3D86A96C557B03EB0F6C7CEFAC933DDAAD94EA08D142A32F033B620C7A612930
5788A6AFBF6AC0A0C5CCDFA25165223FB04C30D61441B0D8380C691809C9ACAF
034D50D17F2A296C01A1E873C427D2A9886042A6D08136E6AAABD24792920E32
3AC159FDA3FA44E88AB7EAC247BD9D5A2469070FF564174D7A0F0317923B738C
BB7411B3AD53C23401F78A1C0400C341078EA0D7D203458BCBE1037608726E4C
E15FE38039DE3E58F0F173E475004F069BA9480DAFB998E9C2E2C4859C4E4B63
7D403806BCD68D582AE0966D5DD6FD949F99FC4AEABB777A186484F58E757851
AA44975855AB9D1E3310DC01B08B5CA0B24E54D4FD140B5D3C78CD7015238259
8D95ED495B606A9A3F14ED7BA85AA039685EC002D775BF88D7E1F8FF37B9B09F
B9A55EA4BFF487C60B74CAE6BBBBC7FB88A68B8A5A54BCB918D3C672949BC253
7E843C2BA6C7ADE1A75335928972F1EFB305F4C0955523002236601A404DEEDF
8BA5ABEFEC78113617E7DA4FC592FA87E0089B1A9419A66749A4E3B893EFA25A
D37DD976A3F7E67008CADBF78A9B5362F30A10692689E5819F95DD1DDF7CA885
6A61906BB7222DE42F65F49426F8D2F82F1532E6FD18BABF43809C623396A28F
1BCE8B8FD54F571A7294B36C813252CC5B3A873DC47E51E1E4C434241618F27E
984ADFC4099E16235DC30B62FB615A65ECD71A6280AA9117525CEC18D992D0E6
20ED4C60CB0D0FFCF834FB5391CE5A74B97D15643339777EFB6FD03735E713B4
13DEE9E82C7D5A33CB18E948313550187F57B91B68F40E406E3D7582CD30E502
7E7202D05452C3EE78F7C730025EF2D81C22842FE8B62954843A34841FBFEB76
2EE097D8190E80B9FC60E8CB6A7E7849651D13BC0A4F00E480335E0F5AD3590F
6C696A120E2380F15F664122CD4E69A92200F200C5DB69FD3CE06BC4717BA118
B0BBF043F5BBD7A3CB9753FE84582EE51365106C6DC56BF9E112781D53309AF5
36429ECAD0ABB8404717D1CD593D63DEF77ACD87700D0CF5F36B3DA0FF93A42E
35C97BADF4169356F386E7B79C2197062E38CD79E556BC4D973A90306CDAD972
10118224AFFC34A887A6727B3D1F581FD14E3922EA145AEC22331C2DE70F0687
2803AD9E5C8401B7AB130A3915A9FA4CE5E085595C029F4CB25BA1A334F4ED89
E9BC2761F4B71B7028415C3995ECB0774E9E3F85BB22F3E2F46E086387AF4A2D
B7D3158AFCC2BF49770C2D7043D5EC3DE40418EEBE3C997CDDE7672AC3ED09A0
2AF4A6A608C12837DC28BC2BC1F61B40CD1235DB422D89735D609CB0F6BFB3D6
2EC73AC87A9BEFF14C1563C4D2F1507A513D9BDD6B39E62BB83417C94860092D
C6D54944FA43E762BDA255635C097EC7F9CE8AA981852A86811B7570F4637CC9
7DBBDB97F9AE01BD09F03B0CC4928D6A50242AEB38BB7ABF4078535CFF77DEC7
38833A4E714AE259BABE49F32A57A4764E0C948034D90F8FB896D515384BC0EE
2A82E27E2C4AE2609368137FD2F55039477DB875A75038791E7660FEB5D697FD
ED7A7BE81EFA14E50016CF65C8AD813769B2273012F3925DACEC43096850FA67
4AA29AE0C70F71EA41B0DD6A27B8396D56A2BD0CC0EA7062B322B87905C106EC
D4A514626C26F0525E5B9BFB146DCB237E2E3A891994261CBA635232FBF0566A
EFC05EC225465707D5D42A1F1C2AF2C3F2D1B93234721B3C007FA6C7808DC238
EAA643B313FD8B3F70D60E587B8456C64747E1C99FB6B9F51301D1BFCDC497E0
C841E96C04AA5FCE0C497F0F6C4AD7C698D02CCFC06539DA7CAE77CBCC9DE13B
4F3772CDD66586DB24874EFB5DFCF4C778A78FB1C3EEA8D5DA07F66879924329
578ABBA2FE6F540FE7010104E1ECFC0959C0968FC458D4077BA50490963F1A6A
4FDE55E239E7D753A76228DA7B8EA75C106CAA2C4F1352C147B8BF4189A2476F
6AB23DCEDCED32476C16C7F325997C0CBD310547E3DAAE355583D824B2BB0551
1A470B19CFA88B9599539A819E3C6AB5AC685749DD5A651DA6117D663E34E5A7
DE2D3AD36415EE850756CF52B1FA1539AA48FB347E8A5B616DE1CE3AD0390BB8
CC75D4CC279907E39B68ADF3E9BF9AE1CBE52FAFE31266C2FD1E577583B3B839
A7C045AA3D55D4A86D63AA1AAA2796C0C39B0F473B5AFAA56EE2C11D055CC2C1
B7BBA39CB2BEC182AE0BB3ABE0A5362CDECCBC03A4260963BFE9E61E84888F23
C38043B35C0E9A8F3F348E9FEA0D981888BAE4A5F2FE3BBCA3201A58EDAA7489
ECB1A7A1071CCC95F1C3CBF23AD9331308A8BC5D2F6F8D3BE975ECADBE668DA2
C9492383505195836E3A0F5FD42EEC1BFB72C41194E01F25568F03F70E01766B
E456C0747CA26E829800CE4AAD98F6CBCDFBD90B69A29523C4637574DAA16916
B8CC6DC32495D5247D877D9252982EC497BC374E61C32BF364D92085764B70DE
6AB3C9653DB104E25A5E946CBD35809C3AD0F81A6BDBF37855219F5E55187DF0
9674F324FAB81E61751AE6213C19B78FA8F9731E745F2BA8ED8B00CFD8A93B2B
B05DC7C686119D2B31A94BF39948D4B3688E588AEAE48E2D6E7F17E323561C1B
DE7D5E9A26CC0D8AE986569630337EDB7C4001C27E854D53B85D0F4ADEB39DEF
82AF071808C1B0A53416859DC9056C637B55F2712AC7E26DEA1CDCD9F3B7D521
C0FAE23596011B1DD36CCCB5BB7A0B835F439B2113123598A59133EABF0FDC11
E0564EAB95A2EA372DB1166A15B52C5906F189E5448E5B26813C6054B0EFD355
444F1EFA6CC2A3711FC47CD0A0B1342AB1D8CD714C4A4D49D972DE129002DD52
25DAD211F5C72F3127A60A33D311387BD8237FCB0D067F058809C206D19C54BC
03C10FA55CD42905815E4B59FBC32679188117A12E9700B7EFE75E9FE9452857
66C06EA868F915E051139ECFE22AC9B84668FCB334760DEF15804BADB8D4AE41
4A1410886EFF8D547C60BB2BD6CE0EFCEB51C3C63436DD46B6D3A3EAAED802AD
81B87B3FDA2CC3472D6D40775CD82E40FD770694058E5A6A4108FA18CCB93DDF
37041563638ACEBB087D39FE351FAAC840ACB9D870DBBBCAE5B90560D4FC5E6E
E09C613EB234EA2AC527C5E0F43C29B797B00D04AA648EB5CE51D229B3BE5AFD
D189B9D128BF0081E31702AD33E1EDFAABFE069E371FDBB88E24E61EF1A4425F
9AAD494E8DBB6F049C331EA174787ABA8C3EBCA6A4A7A8C19AE821F785ACD311
E1BA537E646101F0DC2F2DF5E5E28B78788C0C4A4BB4078CC2D60348637DB317
EA32241FAD981DB72E50FEF3F5C5614065F472448F73F6BA1AD12EADD820721F
49D4ACF587E6BBC957E31B764127ECC5CD4D1718F1294B63B42466D474BBF5C4
ECDE16AF0798D746221311D996381F14F762AAF8178718AF1AB3F871B6C390BE
93C0CCB39A91EE154553896D6CAAFF7F81CBF947734D938D1B967A035827B86D
C28D9CA4675C45994145E4498BD605DDF04CAE8A227CAB65E8F6DAFF1885F4D4
AC55BFB537DC7F57BCDD94A615D500276FBB0FBBB421B64622C3582C7DA7F323
F1A17FFB4DA0E728C6AD8DFF966E4EEBA228CD7BBF8FBE60B6F7491BCC79E253
1E1715A18BF8463DD6FA65ADE7B824DCB6753DCD8534FB2CB20A8A6569AFE369
57927B29F06CA32B3C4F6D28AECD410B347F3EE548C0185B6DCCAA31E67DFDC3
3E9675CCD879D1FC8F15B5DA4531D6C02669F517D745F105E7E4A1C6392A4FFA
6C9F0ACDF5E2959763CEBF8F4FE7107808AE8EB4AFDBB8B30C088F5E2A8048DE
2DA03833C7DB980D9E275DBBDA771711A47CC4E3D7EA5B99653AA4927A4409F7
3ED0C3FFE309FC01FFD44A53536795F428AFA19FE1013F696F06BBA6E620EC0D
178E15EDCDED032DDD6134A2534DB1D32E6AE8EF8C5F3A75B96D9812B861765D
11A4E41CAADC6E46558B786702C1B600D53F3FBD24FEFCDDD93C0750D7D18AB0
FB8A50DED07122C1368F36D6C66991ECD1873495FA7BE06DA7FE41DA950C220E
6B1C0CAE82ED67B942D147CA57D16BCFB71A86B79C68F54F4780A6A3E18E11D5
97384062B6921119C91E836180912A50C2DF7CAF1FFBC5DE2429EC0937424FA0
62A658C6191D17E2420632205AAD34FEA77C6AAA2EFF416F4019F2F9A860DA39
10C88858D1C82A6F8AFC15549B3B56D51BA9B2943EF6CE6414D2C147A97550EC
E7B6C541ED84B393619A8F1E60F3AF15BF3A0460678B88BF54601C40B1CB7E7F
AAFA1C6FE98B0A7BC79B2116A9028A5D5320FF6AD2D7B8F79E2D45AB47F0CE77
0556D20776DACB93AFEBDCF500015DE2AFD99DE1D69E23937CBA07E34480A520
D8219D6A06CAD60C99DCF308B4DEA1EF75782FCD16674CF8DB41421A66AD87D1
1E7793BBA4B3C18AF2ED2569842E3518C67486CC6341461972DAB2BB6BA2A78C
455C560DD52DD8A9EFB9141B91B7CD087426C3E08B2352A8A8F171E9EB308D4E
B08F414B9B707DDEBDE176319531D1279DAF4FD1BB6A758C719597A25E678DB4
EEA736477DED2169706A3A08A6C1B0AC3737725B08B003C6AE0D270004BFAC8B
110E30E351624965ED3FCA8C20F49641A197F65EDF40E6608DC0DCECACF9A201
EDAE06666B0C65E32CA5B7D7E2AF6EAAE4A860A99EC3A24A77A5362A2A8AA3CA
4F6987543F61BF7F36EA06778ED8C26CA80FF9E7957E2A8B7FDB687D7D2DEF37
1DB2EEAF802E3C89176A66FEDBEE1C1A8847FC7E4D8F5C5A0906A7701F0DFE30
5337A86BA518EA0AABD1959DA676D46EF1B34F2F53E89DF89C136FD8EC982EB2
17D375E9C72409CECC8C2712217433B91075607335EA30C99B891854B942451E
AEB6DE59A42BF8A9D176758764CCB454117C6A19DAD091D2C76464F21BB0108E
26ABD73D4B298E89F512ECFB15B40092DC0DE254C451E635F419AEBFE7FEB211
0919EF41433C6812D91194C16D4B53551D641B4DC46F7289C988FB66D63EE27F
0AFFD7ED780462DE06F6344CDCAC276CBA543815C85B391DF6BFF03C17AFB18B
4BE3185DF2B0CF2D1A533032F3D79352D4FC16515535DD3434C049D5FCEFFEC4
EAE9E99B98882F55287D565BA06E8992A4C51BA22F4907C17A75EB2773B05F42
5F97E2C1C9384E8DC50F2E34AC7857EBA91893597A866F843BA239ABB43205A4
566543D1FC6205339CFDCE3D7D9E0591879D2EBBF372D26997E07959ECEBC6F5
9C0C68FD2813C960904D33A49FFCF21256BFB485EEEF7F6F3AA126F9FF8BA797
3A560B68427B2CF19539B878B748212AE3C370EC159FFF504E539AA7108A72AD
3DF5C1B8B6D25EF6A20589BFFCDB77B27E5F93B8B70E56E08210E9D2111A3084
88979BDEBC79DA98E65C015DD2370302978B8A3C8C4B685087DCB09B8A780316
6BF4FF26A7241379C2955D3864C1BBB4FB8999312089ED98AEC3806B731D7DBF
3F59E3EA56C4C34AFF342F79195B4BCF5B00AA06379EA9383212440F08C629F0
6FDFCA163602AE1927951409C5F861A2444D88F2F02D093DA9EF31132A9BB018
F394E177B2083FE16756E5093734307D8FD8304C2EC7346D140922799A2117C3
BBBC5EE098FD6DD26DF5E83ECAB551FA3D94A75687D720C8F7786AF63CDD9131
A6328AB08C007CCC367C3EF53BD148BAFCFBFF0220E7B83710DB33F0AF5071F2
48048D546E75A4170AE483F49CE806C52C57F61D1FC407F674EF624B79B1C152
173485441CAF6542314EEB7A68C7D82F9C1F9FA9E4BD8F78CCEA0B79FC5E5BA2
55883E5F92AAB0B8550D028F0C387B19190ADF11FBF4613DDFB2139FB6D54748
C9C96E6D63DC99F2728F5C4D56F4AEEC70ACC992130D75E2920B5034B484C7A3
22D9188A48D58593AC47BFAC4391D75AF322AEFE0CD08FEA3C8FCB5256F7D290
2FC0E967F6DECABF18528580C99A161DED59EF6C875BCDC9B1435C7C5576EAFB
346A9DF4B7B0F0C5CAAEAFBF51AF06F4E0F492CF908860EE2CF08DF049D5CE32
8AD81BFB68161078CCEA344535C31B888C73BD84FEAD8D505EB15B7DB1F78E1F
446D7A12E13AB5CB825A7CCAB5D7A0B822EE506F4956C4A6086ADA18304AEC31
70F47F909B28B8F509CDAFFB9600CF506DA4C33A0683CD9A76A8561B68F0AE70
1131DBDBDE2E4F529B03551EC7DA11E5C32204CA12A38030CD3D02E8814730C5
85640D809B00CB1DB12767B5B1997AD2FE08C004ED1A90FCD6256155CA4EA58F
8B3FB81771820C04D3FB7D11D7DA73D7D4DAB9459C2B5DCC3B08E4E268EDDB3F
172D8BE12E5FB61EEA65500D048EDF064F200E93A8D4898FF7CD9BDA804FCB60
A63ED5BFD353E1689D435FA6A1BEF644C046FDA867E93523AA89C4B715A8FBD1
47DDA39F9749254A3B7207797BDC144947428EAFDC263AE50220856B05215311
39F635F94BE7D2ED8A75605F1BAA01A0833691821B34D276D18E60FF9667B756
729781A48D0EEA396397D1F53FE66C6D081CEF78D53B2DAA6D50F9C75F0EDF15
AFFCA0536623BDA5DDD6A4F83C02859E47FD66526A5C54898E7F0BCD5C73ADBD
A46E86B81E3A6AE7F0B7F0951BD3096B143D2464DC2B03DE8D2F057240019E47
B22309488763740E5DB474CB0265A89ABFE3035BEB2F547AB7B0592F325691F2
D2F4BDD11E7CC1E7EEE67E972B36D4B6379B5B1E3F96241D25B548366B77D7B8
6194D97FB154146E11322465C2A15D004205DF309A7CFC900B41FB026A66FA53
F8ED2947F8299D03E9513DC742F46308FFBC5217A9B61F835FBA47FBD0B7CB1B
E4301C29BA86C92C4D3CB81FCEBFA5F2F13244ED7ACC09082E5C18BFE6000926
24A39EB3C37824D4C02333ABCB64D1ABC774B94074427DAC5B4A0B25B43BD8AC
4AE9D4E779E71F6378CB005687100FE7F5CD496F38578ED952E4A76D8E5AA4C8
0BB272BA01A17A28B39599BE868582EE02DF2855945CFA3509FE5B2A2B43085D
A66C0A14DB8F6B5E86931A969E0E09D8EC1DF580F5BE0832B9F848E791BA0A28
2B5E6F3200FBF1D15E89C0650476F83E8CE1444F7798516336AA097BFA28274E
76E02225C1F2A08F896ECF44A8610F613D79AC8828786AB19FC46E4C3EC4C62D
25B1ED569F112749AC932A52D2ADE7B89EA72AF3F9BA88C4CEA4420F946BA0FA
A76381267780F2894F4EC583355CA363F4F836590A6AE125E05341850D98BC56
5954B17BA6752C7B65E5FB49086EC60017FE5ED268C9BA142CA11828F7E59089
DD2782E00449A98B18BF67B0991BE4696D9FCFF9AD80392E476BB4376ECD8F54
61B684C5DAA0154AB0A891E4B2A59740852CD0C5AA6223D19622F79B0E28559B
399F75811DBA593E52497048CCECEEDAE76894628603114FF75A96573AA84D0F
20D48F7C5DAEC529BA16D40B1D4179C668B3E11EF79D73F79586D6C9475DF58A
924D62AF1C224D90A626138B014E87DA329F26A26040047D502F535B2564F43A
39CF67CB537E1486EDB380E29482DDE3FC65E58EB36FBB6D5F1584EA49104C4D
9BCCB1F134B1617DA1D8A95C14711FAF83920EEEF1DC3263BB46B7887548102C
7E3322CE4721CDB1016424D411B329BDB553634F750569F18EBE1DB6BDEB04D9
BE2CE465DE60D9B9887AC50CF89ADA435CE1C7D4B6F62A556CAD6F0F438C4A29
D6D6D501C504D0692C4C756597E07F31046FABCB515A67F14CB3B6EEDD2FA426
88514BCBD4AB49817AB37CB52D2320ACB806982BA24967AD2DF11BA9D75636B9
FCB30A14EEF2485F4F2EF36E2889A7A4D86E75C20F48B6691BC9511A3AD6D2F3
478C14BCBD06839E818341D0D6F9FB8C58E13507F862D6E1C7313EF5EF09B545
0A069AEAAE82A1B43FCC2AC4BDDB5D258DFE5E3E58C93F4E79A409
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: NimbusSanL-Regu
%!PS-AdobeFont-1.0: NimbusSanL-Regu 1.05a
%%Title: NimbusSanL-Regu
%%CreationDate: Thu Mar 20 10:08:51 2003
%%Creator: Primoz Peterlin
%%DocumentSuppliedResources: font NimbusSanL-Regu
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% Generated by PfaEdit 1.0 (http://pfaedit.sf.net/)
%%EndComments
FontDirectory/NimbusSanL-Regu known{/NimbusSanL-Regu findfont dup/UniqueID known{dup
/UniqueID get 5020902 eq exch/FontType get 1 eq and}{pop false}ifelse
{save true}{false}ifelse}{false}ifelse
11 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /NimbusSanL-Regu def
/FontBBox [-174 -285 1001 953 ]readonly def
/PaintType 0 def
/FontInfo 9 dict dup begin
/version (1.05a) readonly def
/Notice (Copyright \050URW\051++,Copyright 1999 by \050URW\051++ Design & Development) readonly def
/FullName (Nimbus Sans L Regular) readonly def
/FamilyName (Nimbus Sans L) readonly def
/Weight (Regular) readonly def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -151 def
/UnderlineThickness 50 def
end readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE33C33655F6FF751F340A8D6C01E3
2E02C24E186BA91B34A1F538959D4450CB683EAE5B034D030186901B458D3777
6B3942BD2E07121385120248891AEC2EB33C4E3A0CF00828D0F130C31A918C18
979FE94379C648EF21ABF659253E43CD1253866F157F1DF85AE7E8714F061B1E
ABA3AD094FE8D6293916FA82EE4F486C7E513A06D4C9BE44306A8287970B4ABF
B6D1F9274A5A0BB6ECF713ADBD1260D5D6C4420D357FD486470A74B2F0621B59
A9373ABECDBF32FA68AABB66FAB0C970A3354A335D70DB2CC5A3208BB6D768E7
B58CD9BC2B6B7E110693C5A88D680B7290DB121996E3B7C8AE3C23147280F8BF
D8C60B415552700FF0E44C2257B467ADD5D550F61EC34A76143393E0B34D55C0
8B64B48E5F1FD16E16B967511AE15434B7F755BDF2574191E3C3DC528B69B5BA
7DDBBD3C7878FA69ADE75011A2C0F02F5707E86FA632D1269281D3C265B31F3B
F3145052467647AFE18B9D763FAEE4BA72CB9C385568EE5BBF5854C278F1E3CC
475C6234E83ED33345268BE52F0931B58F302EDA0D5751348E7B7E53D4882FB6
9343BDAAE87E48F6E82024D8EC1FACBBA36582092CCD76553B0449A5090774EA
7242123C53B80F2E927B98DF2B36C403D1FA1E9F8439F3964DC9F89A0CAB5AE2
C907309460F097AA87BD156575D6C73EDB2B40C015E67734397ED14395C43394
7A0201C6B0F652B035FD7BB82ED236D0F7C20048AFD83A56925C7A2898B46270
B440913E4714FD89697B3E59F5BDD5A2AACF6630257957ABE1A63502A3081B6E
307A534A9E238F986D4C866AFBAB7A0B1B5A6E99AA0A56DC1FD7E8A39CC45147
259AC7033A0C58192CA82FB12E09F309F75690043646193AD92D2368F345771F
01CFD21236BA52F74E36CF4B94259CDBA2EF1D61AD93A2B942A9896B0819D20C
59E440851CB99E89C887FC62FD9E7F88F54E5BC157D81A5FBC70699820C51BC6
27D7755B195C0BAD8225A6F3EAE0A5A674E8AF6B11BCC69DCF5FB89D8BE0E2E5
FE7E2588F93F583E4E2F6ED5457E90B902B02F51D54B9F0BA54291E687F4A7A2
08CA5FCE0C9F3B954247312EDA3C532D3DCDFDCB56FFE03B36DB7D549D4203C6
7DA8772A2F732A15DE675D3212C28DC755E3D0156A777BF514112ABBE4372ACB
97D7834813E1850F90CEE543B4C09BE1E93742EA98B8CACC09FCC4D2595EECD4
46C942EEA60211FA7DBC11CE869D55BF0C7EC6AA747EB2AE2CB3CC2DBEC936C9
540CE2E08291323B36F6549CDB97BBF9F0DA429CA9C863B629410885540DA6C4
9AAADB30C39051C993CB547BCD573D6448DC09BF7FF2D1B108ABEC2AAEE4060D
182ABDB3100AC627E5C883E8F42D90D699C8028D4123472F211C8FBB744D7E3D
C626ED03D8517D69E1ACD26BE4F83FAE31122294816736827D138E4F4CAB1681
236C1654E01231EA7F08AD0E73BBE1BE19A7AD6DA63AE0C7F5A360A53BB35268
CC90125C7545D9D59F5127F0AD964AA66DF020F639832FAF9C2CCA82C01120BA
6469960C350D3AF786666EC14158728E0BA2DD8A639C28E0A7EA8BBF608FD7DF
79C7B5DDEA05C8C3D6FC70177D1A9EA9AD056F0CE31AB535A22FF7EB33748071
694BCE70111394D24DCEA030AE4C07AECAC39144621A6B719682FF74DB5C081C
B538F17221F8D06EAAD43B64DA5CF93030CB93DD54FCC5B44980F2AC6A66C512
54F71283450DFCA305E0B134FC95E54C2699C18624EBE6A7D0067E306EADCFE5
2D2A78AA02574548893EE05FFD60CB41E00B2E7761AA55732EFE6EE3C19EEF6B
179276229BA324E59A81107FFFAE0685C7C24E70ACB8564454277C41C28075AC
96964C61BD933742996058691C47B09CEBE352FC29A63119C731B3FC8D78A9E3
69F922CA6454BC1F6CFD1E03B285AFC3D8A7C81B83F0D950DAD2F3E562353B9A
1D56DABD05371F9479BFA4CAEC5CBAAC37C200F6E27BB35E591601EBFF9580F3
78E3BF2E599FF22A1434E7D661083C7F8D02F91CCD580EA19FC752DC79692238
0B10F1F30E98E1E0ED657429F1381D1B03331A3CC98E1AF521B1414EE94D14C8
7D708250798164F82B27010F365EFE7343AD67273FF8D268877C3A3B197F3380
C2E498998FD037D939B772D6975B5830259A7146206F25481C94C0C99771491E
1E13819CF6A733333529F06FDFCA1636023C3B45D99837E560B8513E93E598BA
51322F0548A74AC221796FEF28187ADA9EF618EFF432ABF3634C8ABE96901D4D
C836B1FFF64714BCB334503F9F4AD87247E41367FC2CEC2A5A0598DF339D368E
C29E1062CCA94A64F8CFA855265AA9F5264E1F01473AEB7F94D76F75EAF78BD0
448F9975B2D5140B4AA2EDE7BB1E31900813D62EA4F92A85054AA17F40FBCB4E
B9376B747F197C1A3A1CF283F2A858182EFCF99114F384B2D69C75A42B747C9A
D2875EE7E519052DA057ECE9E445A03C052D4A74BEA98256BFC6A306ACDD86AE
FA6F4F2AFCE55BF27AFE64E859A014650DD9C516FFEE68BCBEA7419EE8EFC254
47C8A5E11A3D7A81DD64253681FE4F30DC927332ED3E3B74F586AEDFDE61DCB3
DDA0653E4D3E85B094325A11DF1406AF1D0AE60BC2939C038A308187A604DEFE
0B9279975DC15BC1DB4D67B315C4556EA67A7EBB14725E4813E05782683C877C
7EC4C86D6FD37AFCAECC1EFDCC281D68285BA128E09B840E807E6F6C5AB14846
440F9F29A0EF0A826FD2C1A9A413FC7ECF8E28E3CB0DFED4D966B2FC714E791C
2397F448AFB8EEF22A89821C59478D7A8D0FE32642310F2FE0596A71ACE3BEB5
30DB9A6A410A930F1860B9D57BB8FF95157BA7F86D3B00E08DA072CF2B6E76D9
38A4E88338EB0C61727E7985D18DD2186B41304189DF7DCC271657EDF942834A
D01C0C35437042331634D36C594CCB478C9F9B044B053BDDACE41DB514C3B00B
01D8AB1087A15030E885AB33266BA231D9F4FD27985EF9F5C2D622DC7ABBAEDE
5E3CF10F2D7A6224C7C58BE9B74002EE7EAE2D5BCD4E9B3AE39711229DE3AAB8
449E7A3D1E1D5B48655B85061B2F8D274D4FD7E38622FFD5699583438F3F48E4
007BE822675FB77B4A2425723C4E17B4337876D8F177BB1627A0B0A77DFB2BC4
F179013EB2683459306C0375D4286323585DF4CE4F12D8692303A5910A523F14
1160A03004C4E657743F30C0B7521B037686233873932C97A3AF6E278B810816
72E3D2F37A32D857CB7D3FBA8D1572B0C6CF5DEB2006EE149C90217CD10F49EA
0FA80EA90EE31475CAB3D970DEBBC0529ABCDDB982C521140FE68AE421F4B840
F3E49BDB8737DD3E0C4BA43706B0223544C471DFA2DF76072D744E09C60B3D0E
5A75E77EFC7519E24686C8B0E6999EAE32BF0851306632284443F3969D44338F
4D26CFD9DAE6178F530A5504F04FE1416FF89F619FDCF94D05D14D60868BAF7F
922A5E3F85D76D9FFF62B529B7C06F0D82C5B717B54EEFBEA4355C97A876B2F1
0A27D02516826FA1F5421A038CD9733C261FC7D81E39003FBF5F3BCB539E1428
B2F640846ED32E837D96B25D6BC444B975AC755C37C1FB37DB74293A37B47615
55BC42BE70D7E44DD7686DA1BB9FEE3B310470A176A5D52765262E9BAC1782F6
5E0AEF1BFFE9D10A2D5EFE5C0B697B8D24A6F3DDBB8A08478DDE4CC8D6B08444
A65D686A52A3C8B0A51BA9352EFE2CB9DACC8F49561BA4121E12EA46ED7D7E91
A23A45594180BB126FFED0FE7CA4B4876983E9A046CCA628844E406C6B9E91AE
FA2D425BCD932E3CA77B8896B7F28FF25869964902C4631ACE189A645A13A47E
4DA399C3F1219A6E53D33118E057CEE724C0BE7781534D6E46E9E3BFDE78BB59
50BB6F4A2DE0CAAFC9D6BBBE0C2FE26B9A34872FF4E46BD5FA731AC3BF3A822F
06D5278265F3717FF7D93722DBDAF6F8814725AD992D60C83FDA1EC5F93D6233
D03F5E4A64401D46D22918F4F1C8E9E35A89CD892C1DD495FEABF6A632E8B137
2B113B8F5E4EA058CAD6BC69941501DBDDD5742A1B49C7E08482FAE8A9552F7C
3A6DE2F4C6DB55B0093ACB7DBFB3E41932E8F12D1751D92BA02E67149041DDCF
0E22A3DD58A6F94BF68F27D24CE63BE6669254059EF10FDEE37A11E6FF38A473
4169630031886D7EC952EEBBB5A2AF017B1F290A4A4C833DCDEADA64D10F06FC
D240EF1F2CC8C698EE1B5F25E1F25935A723624546FABA77BAB1337F907252F9
E53C1E95BF1E37B2EF963A1420BAF24D0146C6AA2E577BF4A9A9D413F41D71F8
6343991E437A5966731F79845BA8FC4AFFF36D11C9019056F8C37E015479C910
466ED2337F96FD35A3A8695DB2F734FF62051A0534521E2C0B196058AD810EFB
8B5BAEBB88E2C48705003CDEEBF4D4BCDE2E87BC029C4AE55AA255FB042B93A6
6F5C464827F4780648133C2DE0B9EA26795C51D45616048AE018BB604586D727
480BF464E3A52FF5F4A39DBEE7BBDE4292BF4C7941036C993F3E24D036FD2AE5
C8FF7BAEDC4AC8E64159B2307AF2AB4B4002D16ED4D35BFCBFC9380569B176E0
18C5180373D0AB65CEAD7B84A214B9B9C58C7D5AD4EA920E34215C1E67F8D2B9
699C9559EAB6D325FE98D053AFE0ED0F4E3057A0F694F24B709FE74C398113FF
CE66FAD41F72A71212E520EB37057A059028A5B68C9637B3072DE94B07451184
7B249750C88A08230A46A66B4CCD345568F51FC0BDEEFC3735A8B094154EDBFB
2B9E3F9811F6B4C27F842F0F1C52805007D0EED4C0A5079ADC4E1A9E14C80C79
D81676A3756B88590521AADFBC9D6963862E4C5C5652A048D518CC879C70CD47
DA9137E2F82CE0DF81A7D1F3DEA4A1400E4116C21F551663661475885996E8C1
0719323278C72B20DAD0B5DA1273844EFC3BF2CEBB5EEC117BEE969558B1C1B4
C140832336D52A8CA1F53990FFD77EB37F47FA9E46B47A5FEA12F6746D8F54D1
A611B39C0738CED5B1A7CC2FA96782D190DBAEE097C77DC2CD71F329226653E6
2ED416886CC6E5ED5C3EEACD401934E676495BC5929081FCC9779E6047B2BEE1
820CB713416C30A8605C847EA62A250B4FE9276C13A1DBCFFFB21E2D5F7890C1
B80887854D5FCDB6B5EAD9EB9166E9998F0B6E2625919D296CA34E9A36D4C569
F7B064DEC81991A736376165CA54EE2BC767EB459A55DB6A91D14B5BC02466F0
DD311C683F17AECB6B98EB93D6A3F5B4F0049897C3461CFBB7A5398C88303115
0333F9A26C554A65A922A529F2A4A458D166080CE980FA4AAC61ABA1EBF78324
A421E59B34CA6543BDF9AC0228957C650947905D218087D07DF556CCAD347CBB
0877314A73EF2B6548E036BE5E5F884C7DCAE96141F646C502D0AC38EBF33D90
1999999BF0F8B34C57F08A78103198C16F3A9550D0CE7A9629BF2F13E9FB71CA
9EC8502389425FF6623FF9AD1217F617E7173A27EF98989F2084ADE8D023BBC5
5863CAD27E95458435CCC874B2152A7250A918E08201BF4504E2501ED238AB4C
C6E334B048ED4C7CAAFA7BEA79FC5F78F8C754BCA3A7FEB92D7A91C2946D5B7E
D27AE5CE76D7315F0E306CF095DB370744BDB5CA2F4CEAD73C7895A27F817D86
5D3D8C09FB4BD6AC1344E452ABF15957D456E5453AD553A2CBF7A4AFF3C01CD7
B06B012774CD207343407104227D56AB4B0EE4BA1A9FBD179539822712E40906
9D3C2912DCF73C0598C71574810879361F46ECBAA5901EDBEEC77F589B3B03B6
60F2CEF7397BCA525D3E0B7B55AA5F08B362B3ADD7B19E4A1BF03AF454606193
D7E9E838ABE408
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
{restore}if
%%EndFont 
%%BeginFont: URWPalladioL-Roma
%!PS-AdobeFont-1.0: URWPalladioL-Roma 1.05
%%CreationDate: Wed Dec 22 1999
% Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development
% (URW)++,Copyright 1999 by (URW)++ Design & Development
% See the file COPYING (GNU General Public License) for license conditions.
% As a special exception, permission is granted to include this font
% program in a Postscript or PDF file that consists of a document that
% contains text to be displayed or printed using this font, regardless
% of the conditions or license applying to the document itself.
12 dict begin
/FontInfo 10 dict dup begin
/version (1.05) readonly def
/Notice ((URW)++,Copyright 1999 by (URW)++ Design & Development. See the file COPYING (GNU General Public License) for license conditions. As a special exception, permission is granted to include this font program in a Postscript or PDF file that consists of a document that contains text to be displayed or printed using this font, regardless of the conditions or license applying to the document itself.) readonly def
/Copyright (Copyright (URW)++,Copyright 1999 by (URW)++ Design & Development) readonly def
/FullName (URW Palladio L Roman) readonly def
/FamilyName (URW Palladio L) readonly def
/Weight (Roman) readonly def
/ItalicAngle 0.0 def
/isFixedPitch false def
/UnderlinePosition -100 def
/UnderlineThickness 50 def
end readonly def
/FontName /URWPalladioL-Roma def
/PaintType 0 def
/WMode 0 def
/FontBBox {-166 -283 1021 943} readonly def
/FontType 1 def
/FontMatrix [0.001 0.0 0.0 0.001 0.0 0.0] readonly def
/Encoding StandardEncoding def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC445BC2C03103C68570A7B354A4A280AE
6FBF7F9888E039AB60FCAF852EB4CE3AFEB979D5EA70FDE44A2AE5C8C0166C27
BF9665EEA11C7D2329C1A211DD26BB372BE5822F5EA70D99EB578C7BEFD44CDF
045A363056E5E1CC51525EA6FC061DCEBB337208EFF729802376A2801424F670
0E7E6397B28F15BC10B40012B0A3EAEB2693E8F7F627C4C9C7C6C5BFF105C1E4
1B2B9E8F09253B76040D268B80719E1B3F5A55AA45ACB756B8E2BF5B37627E46
DAFD4A4F741A859BB5F7D7C77FC7AA96EE6AC93C06CA829B81FE31E32D59C6DE
B1BF3B6CCC5C3C9296DC86D01487F08AB668F656CDD88EB816AEDD1EFA47F014
FF598E78C978DF18F8F66057351BC96B48015AF2E09E3E318053E952E9AD4037
BFC7EEF9CBFD7BC35746565B7EFBF241639793AE357220843147FADB929FBD24
01C88A382F00BF79554D125C543455330002B0FE6D229830470C78541E78DAD5
3E7C1A619B91215AE025F81561441BFC9ADA446035B8EB9C3D69BA746AD0CCAA
049D1FE4D905DF3F48D22900E02A23FB23F6B571DDC8B2CF7008431C1EAD7F6B
D92A2C42CAED94F9714F44E3CE31FBAF23A064AA2A7F13D6E5378E28539F0009
323A0755E58BA7564A408B142C230672A423DA6A6E54ED162AFBF8FADFA75B0B
FC648D5DA6EC31251B62B9F619AD9460876EEFCB8F9D2369CA3055820306533F
3C1D47D5A2EF97619FC2C780BCD9540A820748369FFDAB9D52492F130C0AC3C8
E0C87377DA6C21F1DE429C15AA939877876F84605F6785B5ADEA97321BF29DEF
3692AF535EEFE801975F94645272142128A3FEC8B1BCEB6E57B83520B5C4DD69
36DB8CDEF6E49B8944CA31C59F8790CD3FED58F1182D9AC6DCB2D75B4881B430
C67DB769B4745EA54233CDFD5600BB2A96209A83FD04C13D4AA4AE27DED97D25
93F6FDA5F64711EC7A2899AC98BD8D8879A6A348265832994C3BAD80E1D12291
CB05924302B780443A76A09E1C27E8DCDCD87FFE3BE17DE0421A47733C2BD723
9C876942155834190F65598810AF8CAD9842F8A1E3BBD2AE3348BD8FC9189FE2
ED5643EC4D87148775121702EEB7639ACD80EF4F07542BBBC09F98F81FB91A1C
89C691BF38CE4239B11C1C0D9A6B864753E204C0BCCB093E139F9D6104FE0584
DF022C621F86E5BFE2E047FD560E8A89B3872C87F7811E9EBCA9CF182472841A
88E7C421E5CE69DAD123B88D4E6C0FD85C86C74435BFCAE28C2B5CAD57D91A9B
4473906D044085B5336B066C6D9CE994D2B333F470AD32D3BC28BA2D699B7AE6
2B689CD50CE2D458501EBCD2381F3430C3059EDCA22D9F15CA03CD18CB160E59
C0E960F79010DC1E9EC40BA6914F9FB7951CB4D5AAFAA135C17D5D64CD848A32
C71A5C856CC9C94F24B6C9AF854B83771678C0B0B4C6A4D9C05ADE69E5C04697
8751F11D2AD3FF00277E0E6C7F28BF6C8D5999A62AAF445CF5BDD64743F6ED83
4B27319027ABEB10F26ADE7BF495FA39F9629EC7CEAB400829E6F6C9BD29A7BC
8BC42F8F6B29C7E1E209B28471B69EED368C7A655F5A0BDA92FEAB15171D204D
FB53F6FC0A5BC9192DA974ACEA54B605DA2F3E139A642464F431CD4C5A27164D
21047DA3A5D20BCC18C1C11B92AC37AC7F87B1FD8620A526D05574041E38FCE8
1A6B213A58EAD972B07CB644B4E14930D5B1BF2474343B2218DF0980B94F0B7F
68900465D114CAFF8F8993D62DC45BCA016BD81AC722A4F4CFBA1357D8E49F0B
D0DCDB82525DC3EF5D6EE25D608B6AC6EF9059A685CB3F8F945E8803662299A3
E81C9D0B285A9359BA59B9CE48EB81113060C84B02FA2128295FA37EBDAFEDE6
8E6C28AF840E8F10A930D0FE97916CAA530F257126881B61B3D97B321D4D1AD2
6ACA63B2E1AEAD490A93B237E53F35DBFEA4308BD419974CE8BE2FCAF3D71880
DFFB477C386137984A3F54ECC8D4948AC06B12EF345255F15F43143355DF09A9
6E5F00DC2A401024529BEB398AB20104801252D329970B20D2F640A07A02BBE5
6F37BEE4060ECE15FCAAD0E5B0B2C42BBE5A030D57D9F4CFDC4C1FFEF87FD2B0
CA2E1A287BED8B3871D22426F200FB8824E27D3B1F736466EF878BCF4C69DE18
407AB99EEF38F110610C982A479732DB16481EB26741F1C32CB8F4DAAD2CF7DD
33D7C384315FABE0A81376F86BCDDE43D2EE0AF274AF99DF6CF364EA78A6FA8F
A13E04D067B55F84954495EA3D40E26708374F1BB5DC96B5B927F693F3506D76
C9184F8DAC562EA95E0C8146B860B8E47A40077DB6A434E5A59767F627D3CCD3
2E4B6170DEC3F342CE36CA69164AC2957EF1487F54EB23A1CE0AB8CB768EDF04
DBF511A5198E543AD35710EFCF4C5C6CBCEBDA84D4AEEA1D1070399A6E816F7D
DFA1EC3DEC0FDA50ADF09D8FCC043BC697DF01C1F094DECCDD9F43AAB88640D0
E9347F688E478603573F9FFDD42D1DA7BA6D125B96B6B3108353AB9543F0A89C
4DF01C43DED1DCCF05C8924DB410C86AABB13F6BA87C9393FFF888CF92C4CC1F
EA9BCCD69791D42C625AB18C51794740C8A2DA98E57E182CFAD2011C16B42F98
BF0B044C40FDD05A9C557F279F93A3BFEF61CEB3ABDAC3D5AFC748F868A9C69D
A53878BBDE0CC8B76F16243B9056E4D06856E49C0D18C09E15296D35DF91D243
BF4C1913F5F6C757234D7EDD3618CD33389BB0DEDDE4FCB02BCE234F7D09BE4F
16F52EFC44A61D5B8682D1CE77289CD1998D457E81F30245EB52152BB04BF5A3
6A5D0F0EA116C5BAD18FFB0FA090EA49661CDE6521332AD3DCFC40A775DE88FC
98C2836EF2B8ED75ECBD6BF9D3A305BD22339E88CAC8229AF162936A3A2FE7FA
1826E55A000006DFF3740CEB5394FDEECBA0588F367E850F9D9F9F1BC7B00A6B
FF8EF29877FA90F6FD6515A0E033FA45CA434C95EE1CC0E7AE75FBCB62256F3D
8761CBDC51BE1282552272C5CD090FCAA4A1893A26804E8C83C48E47B5450336
4345B0F0BC9C2D2B6E1F9050DEA4517C31B71461AE364725C7FD613D0612EA8B
8B30B9CF7DC3109A959727E9E8361A7507ECA0F0AF845C7D13FEF80B5A93AF15
90C294E5B9CD70FB2EB25770048BFB766992E69CD95769660D867D0A8ED15637
68C122C60FD9E998159889DAEDEDB8ADC42E4935385978B98583BDE3DC4CB5F0
01EE99E81719112DFDBBBC074E297ECE5354D52BE8E1203E3412AAF6C2279FF6
84D2D95E1A2BFFD0BB0720E028145A2BFE6D055580AF9061746895B76811AB03
FC70A46D1EF523365AF141E13777789FDAFC843F9BBBD67B8B607DF384B644D0
C2556462B934C1D5387351F13262878633C0C8828549F10506D13B1FE8A920B2
DD27E8C45E7B733CDB34A13C4A6AAAD9D2B55FB07C915411AFA735E9AE697710
4F6CD1E56B59F7B7F2895E256EA8BF9AAED1E2BECED987E1423804454B088B8C
65AC15B5B4B0C5D6D122186B76B9DADD85B2E3AD1888AF21476AD9CFCD459B9B
156B1E15A51DB8463E432A9A82F5DF64004896700ED6B01FFA79A03A7B375EF4
A24D08BC8613FBB5080D0278F744693ADD17789ADB97447A149E8B212741B398
B068E1001185234B7DB6814DC47F09D142B31981DFC3B4D4FD90CC91A378E51B
69FE0D7A7E0DF6D341E6CE3ADFC829E6F91D39FAA10F90BED333D46826A2EAAC
B7A5A7354D6A76456752A715D75FEC441337767DAFE020F6EBD4B8F3C0B73E16
E8E2573A767DB2C527927D9475E0D36F981606661B06B18F83860A45C98ACB7B
5EF79311B17C6527EBABCA252E62348167AEEE31142F68321B57FFAEA24EF931
8708C907AA1B48762A8C3E56050A2FD01B4C3F9E73431CBCC7920D2513AA1159
DBA44DF3154AAF3E7AF1660A305A460F868CD85F9F3C296AB7EDE2DE6A51B697
DCEAC117EA056D12D689FCF2B3737A6232E4783EB4A8AE56B83ED766137BF279
C2F3F3CC8C5E5189F8C986AB3EE576DA9DF54E80DBC76C547464EDFB81F79E5D
7A9AF1DD9809395AA6C4C068BCD5B5207541D34D74166ED6E03FA7D9C4D08739
28EFD596DA97D96749677E52589B44C67F1B0A7E8F6FB6C4224266116D30643F
5B68D08B8F14FD0429C6F0C4D02E28A69B83EF5981195AF6FB3613911E8B760D
FEE9975F951B5C0B3A0206078CA29A08262ECCBCA3C345478FBE7BB6F747AA6D
E703211EE66FDAA7CCAB7D17540DD43E4F508333B16B96C6208FF05093842B9E
CBDFAA0437471460AD0124D5C208659D3297FA85A4D6BF808EDC055CAD38F8A0
8A67208A4F1D97F55CC3BD66B83B15A4F4719E66EE3C64292C209A832AF504B1
BCEFB77970DD11EA6E1A14EBB1BBB062CE726E106E133719310819A17B497CE7
CA888BA8F20A1B15C28337D8C5AB3B1D1B869CF99D01F25AB330441646F45EA6
3BA74E3B00FBFAED290CA0BBD3F6415A630786BFCB54466A1FE663624FC2ED47
4E1A419241433A928756FC9BE403DFB623C044D7AC4EC43D61AED50563104DCB
AE91522BFEDF4F7BC846F6C16FBD1FEA608892472114520761EE1EFA0C84EE5C
32831DF86CDE918AF0C8A3A112FAD0A55BBD095C894193F7B602BF67318CBB84
0C4FE105564C2801FE2364BB0AA4133EDE1B271BC39DA381F6907EC5E1AFE48A
6325C7CBFE5F7BEAC939D7829607D558D1407E6DD0E2252C440645C8AABF5A03
7944087CB2D5D260D28129A5DEC17042F2573655D4AA05C1004E76D2A1369E12
B6BA631539586DB7CB534D1C5C9B5B5C7C80FD855F1733F58C452F0A8BD9D935
8E4BBD39AFEA33599848E91987D64A444A48369EC538E3A05E9302010956C520
A7F73F2933999FC1FA6F5AB1D7242A394FEC6CA6C93FA59846364CD8EDA210E5
563783B75A88D3BBB2770F2841B9DFED6B977517D2CA134AA59A92B9B67395F7
59F11018BD7BAA05A09531D8491FE710C015D014BFE50EA836CBB02955201204
60AC52A49D83C18EFC6B394CBF28638A7F77E51C382F45048B68928DEED392A2
F7FC2A0ADC93782334DCFE2E06E0FA4615CA886B4C99386442E675206DF6AC10
1448083D8467B465327C917C2FE06AB6897A334C51FEBE0B392347F7C5BA8EEF
8497D3BB8E9F0450B6C92DD26021738105BCED3E94CECEB2E6E552D1F45CA338
E60FB97E9B4C0A2D50833E3CE505A453E682CDD49EEDDEA814D34AD1C22B7002
CAD36D439AAC19E3514654C4CC0D19A6BC8AF994F2C95B1EF9EE3A06766DB1C7
58286E4A5F6507B71BFB5A502529C81CC95BC6618625B13A344E84B603738B27
F50ECE1AA7A9323E68698E08FEECFDE93BEBAED663B228A4B80887D17812497E
F6A45BADEB8133DF828D62E313CACCD8EC7DFB39E8B46E8BDEFFFD7B819B25CB
9F6631D37317C064A914A40A1AB4A1B1FE63C92C4BF7406F643EEA00F2A64690
71E3EE1462B3FAE9A53FFEAA80840F54322BBAE5674AD48745EC9BC0DABFAD58
F4A555C3E22F061485C036A02B03DA61B29190E5E391355D3EE9821721EFF68D
A90C5587B590FBD5923E00FCEDAEFA55E99184FF90B5FD95DAFBDDDF17CF65F7
F4A9C543542EAD8E5C7F2C49C6B55ECD80E6549A029D9F9FB01D8F24E7C4899F
8162E5D8454B7DAF086B398A1095746B34AF152FBE96760E94145C4283DFFD12
1DFB2C29AFBBEBFA7861C93A59A0DF7AF5BA8562E4FD4B8A6C1D3362A2AC88CD
84612E23EB7C59D820F10C4D659D89E9C34E910333FB6F971D897613F5E2C94B
D8F6B16BBA0310805D19400A736213F9916D014A560CDB431363BAD4B4DA978B
315F723A7E8215DD1BF51D08B5DFB7030D9E7959FBEB4D7891054C2BA018FCA6
B54F4D085798E459B579BAB95672C026FAA8FE52742017422B71F1FD9E04C80F
654730006F3A39B4B8FE328BB1504C51164B5D96E0F1A66AE1DE80F21E9035E1
B534160B7FE592860A47A69D4A50E9FD22DA8092C93B4C9CFD84337192AD5470
D9B3F6F52740745A0B2E51B1B7808E67FAD65EC64B8040DE3B1C11D4C3E93796
E922DE879EC4AB2290459238BD2E0F93FAE6654FB254A462B5B770A14C98A433
58231DE0F447412F2204092DC22B5D7A7D15EFBB8CFA7FCDBCAEA7BB6F59D7B4
D15834EDC7DAEB975E245570204C034F4D4DB7C348C7B908746C4F934B19BA8B
B1F15CB07E660C1285F0E913BF34ED5B5D25E82B3C1215401A19708F47A7A6F3
18AF8FF043E98F477E3CD73D2A6E2F24B085ED4B4F0FD4AAED6C6248BA7A04DF
6D26B429F681D2E31FC924C1DA8BF23BDFDF85404A03F6990623792ECD67920B
86B40354D66FFF7175315C6871A0F212A5520B13592BFB5B1763D2092BDE30F3
8B5C5D0079DD21D7240436AC11DA48F699C7C67840A4F0DB15FFD9AE57619EA3
9C07287B4CBD9EE4012B27D342F0D3361D0AB7B885DE14BDA22F6E793C31EB89
B8D5D9DC2C37FB8AEC4C9C1289ADDBE267C618E342EB786485A4FF647E044206
E1567B55831A2026606C9C380F76ADF4B5E676ECAE6CF94C3101474450E87288
EBA8535F15E16ED2965F7D7C696A5810E5361F89C0B908E5B0F2394B2CBBBC61
1A8D86BA14F9F9CE89BC3DD0763FABDB83472DA16D9E846D27D1E4DCC478B487
5EC28C9B7A009E9EB49767949EDC81FBEBED98FEEEC56FB99927BA3078EC5BEF
F0F793CB44EC523A1B261F8D45487D8ED0AB2C30A72EC227B20CEF82561E2A73
FC722BD5C566804F9516D08EBD1472672DB31CA35CD9827AB246BC12303749E7
0D5B56D93B349A525AE9DB0F143D7EAAF75FE172D9B4C147E28EA9986719FD7B
F5B1CDF889A73A87D454A4EB977509836D75CA7F8AD3F90E9F201708AAF92541
E013F54098BA6C1E8CC7F3801DE620C8987AFCA609F6A4ABCA49F3BCA51F5A9E
84C8FAF491A7EA6083C9FDB65106198B5C2F5031A0CF7D9AE0D0933C367C3E3B
034FCB711673ED052F37A31831E7BC239CD08FAB3A14213EFB9FFBBD6F5ED167
14A33E8C5493E8FE4A6FBD356B35C7E49CD8D7CF9FB27D1587D52AC154F7752B
929F2FC3BCA3EA9006C7EDF6CB91BBCADA99083EC409FD8B2C5BE3A0A7D9C4DF
64138441C559735EB5EDA35B91265C416677C8424D831BFAD85E0B766CB3B358
9E31EA1B76872FC1FA6C92209359B058D53A534E872798E5D40BDE750F806D09
084AD0A9A0F074D1A47E6430916DF13285EDA83C3A26A516F1CC6C52DEF3B059
7FCC197823ABA1560245E75C3E22E469FB7CF387E713113E5D7C2F97116C8003
57D0D589DA18C95EB31D6B75D752EECD07557129EE7053D34AC69C51B61B95EA
902F8E2F53E5217AF981FE7034B55107751B40DEE7E4615242F5BCBA9C0E5A89
2FC61049523E07AA131D09E3FBB727952BEE9DBD3189E682C572CB8CF4EEB3D7
C14DDAFC6160BAA8581B74FA8CC760C6D4A2D3A6D41978DA4347CB49066D499B
C66A06ABCC5CD6E7575F86E0401C507673A80FE252376BB38EF4C427A6A7522D
53A80C1C2F329153E6DEB1C0E8104E3A5CB49603DBE828DA407E089A5256B09C
8B24F232C6D89B7273B6E134E17AE9565160895CA8D5C119C9E649899F623FCB
FD3BE97D9FD776E8BD0C85430AD13990FFCDBEABD5CEC13C10254E3B107E483D
79EF92C346805F061A7408EA2A22AA7C602BE0B0A43D9D5C6F50C479A314F42B
476B322B43D601DADA1DE6C35BCBE54593DDE27E4DF116E24E0B2C3DACF2BB4D
4F11C5FE4243EC81CF8A9FCFE2C2D547F1B703A410FDAE034C078C7826861B55
19E7CF062BEA3391C5E44BE01179F69EFB34E03923EDA8E2FBACB8D3C58CCD07
BFCAE08D82239911725B143F935D3F4FFDB31FDC40C05D38F018CFC81F4CC63F
2B9EA92EAEE2AE999771B71AF9B30F228912210A5917CE236D356F1181E9D493
36567AD435B299AE54E259EB9FC3E60E60177E357EA977B02A3216EC408B2B3F
92ECCD384633B1CFBE950D0C420E2AA97C1D97C68FEE49A62BC6787664E7B46D
CD8497A7A3EAD89F7D9260E89443A3941E74A7B6EAEF6F0AAE5F86D706C49BD8
E6F48D8F4AEDC9673C880022A7C09E607A199582C2144D78776B1A1D36B43A7D
FCF5FB13840016559462EBAEED6EAC75FD753B150D76FAA4EB347390DD0D3F0E
48986CD5BC79376ABF5FE282144CE156A7A9AF5710180F026127C662D7F5E106
B7B19AC38E487376295DE5AE6B2D1620DFF03D5CF381394BCED86111868CD4B0
550706E9B11B936E08E5CDC6C31DAD9DDEF9A9A339D374231DCD4A5983D415EE
EE370DA4CD75CEBC4650DD581537610B95B5C6117959F7F3C2F479FA651F0174
3F267DEBAEA79F59FC510A6ED7864D24DB2615F99CF77EF07C44F6F47A3BDB62
6EC929D45F62B355581FF9BC06FA6E7605222B1C0EB0D51D13D0B26806ED0170
ED698A59B396F282F5F591B5E666A3A0765DC4980E4891BC2344CA179314CBA6
2A3ECFE498EF13D3367549862684AC93AE52B9F1129F33E9D437C106E8C14C6C
A490ACC6FE8AA42D9A9CAA2BB89053AF24162436D12D7C476FF16E9C18659D27
55E48EDC1C78FA9F7914B7FA6F01A8D3914890B410EAB92D8F566DC03C301DB2
D511AA4F2E674A5E6D455B0A79559575A228A6D7D87BB079F212074B1438B256
470129A53BBAC0FA29D1706F047543C627B0A9147327DD8305DE03445C0837B9
6DD341D4A55DC98A0FEF4C3CADC2E3248C2FEA58CC51647721D4F7F37B4F9CDE
4849BA6AF9BDEACBB70A98762196BBD807AF05F2ABF563ECB5AF94AE0B5F7FE4
908936ADF88C793136C9D1ACA5056F7FD695D7A3916BE55F8E49B96021DD868D
29A87DE74FBDFCB83E1E642CB3D7C5BAC359A191FC3CE4E280A94484C8D06F0C
5E2B573A0778C307596544A3BCDA360B9349309D6CFB3067908CB0C50EDCB198
3E8313F0B0C8BEED24C1E0C4C3D0D2CAD6A92652195CB08256D39247699D97D9
D63291A596194D00A676026596F240B1F90C3AEB0CF73582538E38DBC6A1294B
1A5CC3B29482CFB551A33AF7E401327493766CE1FE9C572D786C83BCA2FD4898
0DF91CE1A953B3BBEEF572C73C46F301871AEDEB6879B5DF90944A710062C91D
FF7349874A27B85563A11A1C5B6FF398F35BC5DA8C0901C0933C6E75368F8A74
776D9E86917785258CCBDB883B1F2DED453A498361603F8825518160640698D8
6D9D81B44978993F962A0E74F946EA19C26B2B56BBAF1D727BEA6D6E35BA101E
12DE774C78A0BAF5850C2E53334AFBF076DA9BAD3915DB200E5ACCE752D0CE01
91D57EE7FA05CC52E0E30090213BFF2DB659ADD1E9993E2508AD48902A883F4C
A9682559E4C206881B58EA640A934223A46C18124969093C7788700BCD143346
603DAED4521F35DD3F418128661DA6A7C2E6C5ACB12FB054A7F7E2988C00C40D
351427E46A9E6313BAEB3A19493375F93917170A43C1C8F9A611E34677614B1E
7EDB0F8935947B35221BDF7714650C68B301F3F440B7ACF7F73486DA4826CBD2
C1CBB08EFE9BE450E41549B3753C32E2CD3069E821015303BD0367A9A94391AB
4330B37D4E7E2102D867A3C279AA24A8E210DE5DE94DEBD07C12F50A5E7B7364
7BFF7062E2F619F9CD5DE7E5A67D422015750196F21075B61FB5CA383BEA25BA
D1C1C0DD07EE9F9B11C181EFCD9C2EBA7235815E92A0E042D0897E07EF470957
279E979EF1326D582F451DF8F04A029C6E7195608885FD3EE120E3D46898DFD2
25AAF62F1B735AE7BEA18DA56392983B9F543090A8A1186B99824F4B74654A44
F817A997CBFCBBED9A40A63965E04C561233C3E5964AEE466D4B7F29FC67A1E5
17DFDB28D3FDB15075E1A6807DC55E25C2812BF805979548ED5674B5BB113B86
0B5E40D6A94B4B7704DF0394656DF7D8AFC53C11B76361F3EE76AC5D069E9CED
1955913BB7AB337E6AEACC7FEB7F644EC9B8A6A138A666B2094D62FB568CFE3D
6FFC0EF5D1CC1A4A661491A4B0B3961CD7E8D714DE9FF915B8ACF8D3D032A234
F388CB0CD2D4AC3BAB6258E19FA15B5F2A0784BAD1758F0736421058C4FD6A6C
0542C01CAC6275035EBE5C39D5276C6CD7F3B16D7B2804716365A754D1749C08
24DF2AA1610B070C8536C5EF8291D41332478D31048E9159E14B21E3B72B16F7
E564EDA45B9A233DC6711CC09D239A62C01E21B7D425505D19EE8745AEFC4622
7E34C387E4E049FB9AEF06243D8DC8170AD2C089806E9915F67F5345E1936105
4E07F83F3A5C8F848D0D00478000C0CBA48F3B4D99C1F77EE10137514351112C
7E4191EB6550A14F9BB3434EBA5EF864EE6AE371131B6345463BA6D333D9D164
CA33EF9F675391B403E452A33E8460B22765062E70F4703BF9C7E509060D30C3
426E6B2B95D4E2EA70EAF25E9CB6192083330A572924F4BF5B4F3426BA24D125
CE163AA24AF9ED67EF913F89FE8C0753F7DBE694F12D88918F1967AA687798AA
3E089442A78478CFE59FA20D8967EC6D5214EC298E046898DCAD47FD2806B314
8270256F369879C98E0D6142714DF38DE91EFF62FA9E809BA7F6EA455C9DB265
43348C5CE95EA5E58505DBC3C9BD22AF81529989D7E242DC65878B7243CA88C6
4CF3E636C90067E673EE0226B715B6E02EAA83704D33694A6688A6B731C48C9B
D068C51ADF3E4F57792FBD8794B3F51A1B12324109D6F3AB7D037E509C5DA4A9
54235A57F0F59D2EDAA7933455CB5BD83002BD6C1566B91A5F3535E436291E59
271A341DB73C65FD7AE189510DB571220B5BA8014D816B85DADE28C036739855
9167B39F60394BF6376A2673F13CEB388D230139B748DF953F541C3B84D43364
1BE68601FF109B6B54A2EB3ACD197551C9C745E635D16AA5A46EA9DBB3B2BA19
CC7A8B67824D505EBA49C65C29FC0F778C632C3971F552868A2686B87B563249
6F2A6B5B78572E322C6E6222B3800D5F7DD51735538CDA0AFDED1C2FE09E0AF9
A47F1F23D81DC737E30D52191C74B0F9D96140567052882E420E933C309E6B62
627435C8B0257DB3DACE6996C7676339C2E9E6BEFE35DDFFF857C03DF14FCBFA
3B5ED37C0D33BDDB82092EBFB0BA5895DA98806F65D71E80FB68C3B51B198040
FD2693D9E2793807F9EE92D88F916C91FF4A592BB0E686451DBFAD0F6738DDEB
6CCDBDC62242362427F119E9523A26E8D91FDC143434AA65DB9708698225B09A
FE9E111A238765FA222E2E86BB497B4A7DD8FE4847F1EBCA6BFE07879F89D46A
D8DAA9CDBE47AF2B9873A2D3807AC4A72FBB990529790BE754E4A314EBC3FCF0
CC0F270A69DC6F0C604794599CD605D3A0B3369005E3FE2921D32022B8FA2B35
3E23764E9A5DBE640CA98585DA2A4AF9DE5A50460C044EA84D0117290BCC7C63
376175ECA2FC62EADAB191C5CCEC9A9EB6A509DA1BF854E00955BF51B3D1E186
5B0A293A0032D6CF19AD21811FD0A4E11C873E88DFF88CBBEF229E16DE8D008A
4CCCBC317B47BE42354627EC71858877C03C1100D8EBF3CECA4AADE5DCBB3F0C
FEA147D75978A9A97AAFF053914E587B8B95AFE807D313E29C5C32327692DA3F
04D0384963F405F6363F314FB7671FFB021948AC9FB8410A3DE22E0A01E367C5
24702A8CFEE668758A228E6AC9E51AF57AF88DBCD2B9AD331E5CB431C0BB2A9E
E982A318B6094DA04EC769BD54BF5B6FB81B57168AB53CE7A124D7F479650563
C03EEC93DC64063822FB44FCAF80C1D659992D93E520F1D16EB699D59C4CB0C0
C97CBCBFCC91F89775F0C851E0562BFA6F3824141C1FD194C0D80EC6DC96D80C
DAA78D7FE0F1EEDF40CDA4BBA7D48AE9B47EEE10551616A437EF76F1E19F2E45
CC7C6B72EA089E133C906B3D519C6849442C9C0ED46CFBD9C759E6CBA161E9B9
B711A9F8542C98DB691FB1FDCF3ADF5B6301A9EA3EA02A41D9D60E8E244F5265
685CC1FB491ACDD3A0CE095F49A231D6B391688B5BFE00F5DB8278A0A9110945
ABD709D9C4587AC495570D7A2BE6D380E2CB8342F9B76BBDBE918DF3CD9B962A
65F8E21F2B0F9A5BEB1AEB597276E46260C5DD85011742182FFA73CE805F8A4E
4E57F1F0D63BF3E341EA0644A2BE90C36DA26877F060E7617069E709EC956004
94F60D3490DC63FCBF35299BA46DAD405158B49E0A8E8AFC53227F017B8EAC34
14772E0D4B643A36A447F2EBF4352A98B252D7C7806F1AA563FBA540B9399BBA
C88FDD28AEC499CD77970273C67CCCFE312E2D8DAF3A2FCAE13E2167BC734331
DF56D3ADEC1E97C854BFD04881635C042614B5E87B85FE4D3B978A36BAB82F5A
7F98C1F5F7E3575D369C5DBE1A5E72A1C9FD9B39CC9885EC1DD64D0339A81A65
AD5F13EF88D7AF5339FA9FB8BFA9EC4BCC137279AE70849070E8047AA75BC2B2
CC04F968872D6A0F8AF361CE97FEB43ADAB9D74B18EBC8139F5DCF1002AAF51F
713D4D0616EEEE39E9EA079F5C2F351D81614CD73E5BB1CE3F13D69625E637C4
ADEA34574337FDA7241890659A107950D9C96CA8BC788F1DC0903DD91CEB7E31
E6A442A095C387C10DE9EAE1B7A94381AA1FED712541EC8AF46A1ECE05AF933D
C0C19434E39D68B7A80D8100DE761801F2A19CBE7FA64B863164AA94619BAB94
F4AB4F1298FFDD276633AE882A540B806AB2479C644491E40A62C9EAC215ED8D
64CB3853D078210579B4BC35B21F61B5192166F34059CD19DEE50495F7DA10E4
9ED178615BEA476C882096CE15FF0E112CC860A42D5FB586590543F5432F8A45
84F9A0EF3B575960E66A41B4522CF46F17AEA7B3CF3B801174D194C3859F45A2
864C72187FB7C90446EF5C48954302C969561C704FDB2922BBA3F8F083483671
5D5E84DE20F3117D445B3CAE10C4D614929BBFB0B470DE7D5096EC1B1FC5020C
07835CA31ED079F1FD60A9B43F59B6FB4561B09B456A6F7D85D0D8048709F379
C5D37E863993BD1E8C177F457A3BDF665AA24BDE5E2BDFAD3CE4A58535A605C5
3FCE7C38E7A689DEA93978B410A66B01188A991958BB6D1296A5A8B25162D3DD
0BB2EC2A214EED19C094E514A4C14A16AF0BA53ABF03439ECB30557FA2D3AFAC
FF892B5EB758E24281BDC1FD61014629680382855A65819B774ADD9B8D910E19
5BCDD13939DE9051E8D0541100E3DF0D3F88460E8282639F6511087757A01DFE
1E8C51F0F4A12B222D5A84ACE9F2A8EC2DB98FF98C08E3366801E430F642D50E
1DBD28018ABA71FEF32ACFDBB2DCFC453DEFA99DF6376097F85E4ECEB493F4A9
162018FC80DF96EC4D8329C31BA01AD3CB0CAD933FED8D2C7270E7467705BE45
525C488E82A9E708234455D4A2A733CB9D8B093150A9B1127BC4AA127DA3A2C6
88FB581034669E31F9861E7D9D06F1C048CE76C9CA4A65D3D95F6CA567D2C38A
95C1A590589ED1C26F22BBA699CD3C0AD5AE7D2E91D09522205F24CF755E97A3
214A47893365243415FF4B2EBA5E902D9C5ED30617417F403ADD5B290102C995
CAB362007A28C7FD511F69DECEAF6270B245B4D125FC3B7DEABDAC6F0BA127BD
4B9E4F5EC5D34BE96BA933B1432B0A0B6C975C7E8EEB3E61A43FD7413349E9A7
6379CD8AD85AB1C6CF516B4D7388EEA9A80240C252B2729CB32CDF709D9203B7
3B02466AA4458855375E144A1F57D2C15DFA11BBFA5DB3507D7032AA6408D6A7
7FB3C503F54E22E2B141D5352B42E4794072D9050D5E4C49ED5B73D0C8429FC7
1B92319BCECA99B3486DD3E5BBD096F0E063B633DE2C8B713F2F47A5CBDB888C
84AED27FB2BC0C615805E8E1580531DFAB9BFA054CAC9A550519196C149DAEC4
602945F58703A8903055D53313DBD15D10EB201B61768B0E38842D1605B65B55
50F6C6A2D657588AC7F70BCD0AEE3C4C4713A25B54FC198529882086B02FFDD1
D80554E73283CE632183C1F0C6B459C0C54ED483636707651C3F912A42C67EB4
02B55B4BFFA0E22404277674A4F490F9CD6DB9018D963F2B00A7D4A220BC7B3C
0377C17ABE66201617E9A1F08D74C8443F83CA091965CF0074AA5B7748C04470
9F848292C9E01EA5478FFFA3F15541AE2D385C4097E673AB7BEF007DEC45F491
6406A0123294A240250411B6941F186C4BAD96CF0DEC60B30A03E09A249A6539
49F11C130FC790B6490B1B068D1E432A2C5845B87B5C7BA643A4F0E10031A8D1
E761A755C474BB1BDDBCF7654B832A7B207C9D2B978C772A765BF4796FCB535E
072F948CA5B1A7B9BE9DE338345544BBD73026D808CCF3CD8D72DEC01BDFF50F
30DB8E071610ADEBFD5E3365402A4C0843F9963BA6AA01FA59EBCCC341180B1C
1DEB6EEA5B15F0A79B2FCDEFC148ED6278F828DDFBC631879268A469FDBEE87C
A4714F2A36147645C36FB02631323566DC5C3C95CEC6828484B0AAD0521A69E7
92093D1B5701FCC091029B671A19934263FBC4680DCEF397130210CC12012D47
C2941C504F5B0A4947CE3C4A3E69EE1F4264E89BB59C4ADF042C631053E2419B
CB743524D53F8EBD5F24E96D6E16583FABE2469E2D883188517EB0289A7C2B16
F06D260DC546841B23B55775F20E1610FB3661D8B5F4D9B06944EC6583BCE389
084C0E80590F21843583EBC57AAF4C521321612EF489F2F5DAC82B9C8B19E868
1F28821DDA8C97C6B6A33AA9F79260503A3F40424E4FE56C8E3E8F1393B9EC45
6C9C39755168316B805CCCC246F0FBF9CD7C43BFFA5A68FEC997DA38B5D3ED3C
C0DFF76C046124A07159DB2589FF08E583F1BE104309CFC797D7B4193A12D4FD
AEB0748EE2F49AC021F4F38BEE8DF2FA0427EBE3F8C28EC36BA0E331071D9B11
BF19F5E6E4509B3B31DF2790637E4375815EA4ABE99BE732D65189A4CB3FBD9C
6FEDA5EF8B6778869A1713C9B0AC672EB0F96A884D88A94484C8D06F0C5E2524
D072AB9735CD778C286374763D655E73BCFA53F7656E408CDD8ABC769CD99E10
B0E145ADFA910C9F000AFD3904E1850BCF12BF60093F74E4F24E38C35C32C2DE
49274D4F87BFC48E9030F2B7397413809F1E9964797F8357707CCA39AE1F17BC
A01026571968D2C0AF612CB8A2CACEC383DE0A30321793C46AA169CF8DC7A994
93F16EA93236C3C6C51F3FBC49333BD7A156F9AA3F6494E0A4DB574B159E9869
7A988F213A981527E28993C356BA3B8F9CE7C88F5D4DDAFF1484267FA472789D
E8310AE2145FB76909474276CD0592A40125CB039FD17139B608B49CC4D9DB13
5AB50904F28FE5685C9EF3E86744233C4885E5B6AFB69FB4F0D1F36E95339AB5
D344DB809A152552F2DAADA6EA79F1B0E73FD3C2544D30C23437CF9C3FF4D5AD
D533AF178C2E2E968248D5B79889D9133B6ED6BD14ACB2D66EA78FC8FB38AB35
BA2424E89E8047AD7D73B1684FE93DAC7D1D4D52E872037221E7F6EA93777301
89C0D0E9D16FB3061E4445DD5B88906B59DFE804795EBB850B5B43A46E499F71
9764BA6BF861040855EE306D3D8522B445176AC6DC1E2F712B465B46BAD81548
25C9B29B1BC77F7C18D62E44A0351C8167558745A4772B854BA31F6022893539
80885FE5EF054D5AE538348F5373689767BDB4E0A1B79C7F709E8893FD84AF6D
E09A53E495624EE1474758D2E81F02352D40A590A7DBC8CD3907AD5C9674A84E
355EA4D1C88034279BFE8E1D87582793FE86C6A4C752C5CA74065CB219C926D4
51E0DDA4C3D111A803640AF56C397BFA0AA8DBC86356F05380975216F3E52525
0725A95D156C0530F2F218CAF0BC63E08B2922231BF193F2714FD25DDFFB5466
3E0F7580CB9E6CCDD4233EC7D54BB562A84405AA26BB3C3D63A531723AD69422
D24EB4A4AF5B29E7128579CEFDB790588725214CD33EDAE1EC3F1DF86D57E716
BCBE5A06689D11E1BF61A9ABB7228B1DB6D17FFB1A8299E07651AC2D62B22B88
4D936FEB7A60BDF181EFC663117564EC805B50821B01D7726ECB9315F71B6B6D
C014360B4D3ED785EC76B6E4B75B6FE0DA6EDFA328DE0AF5CD890470A9AE3E50
F3197D822A57E0BA52FDEBF327919D5EA1929B4BF9D3EE8C51A6CDFFA3A97D90
1589C53181C83D64AA38EFA28DE86728F7951EC4DF6A32C3F29E3E53E9FBB35F
E44DC25B27551A21A0CAA3C6139D58E9D69DEEE301BC87A0ACCE29C371F67D7F
9E92DF7815ED4F2F30DF09661FB940FBC00A9912B63D28DA8E1225BEA475CD78
AFA9FD20CE0FA2FCB05FB2F8CC1E80ABB91D54CC81960310B218C946F79195D3
E07DF0C4E00205B40BCD46133468A1F0D010955C6FEDAE7B54D6514BEFC7D625
F59413361E383E29ACFF6841A5092F05D0DC10CE4D1B7A2CE5F5ECB64DEA9B02
B6A4F1DFCFF669AA5422721E3D7EA48AF58FB645C36AA39D5C31E8C51DE2BB29
33A626528F500201A506926FCC9301CCC60683F333D76A43C1AB93000DECAA7A
C314A6B04D95C5BF8F717592A22FE5AD2C2999117680A62B214EA0562234E8B0
AA875206F0919FDDE6D26E7BADC9821C4E8992EB522992925546D047F2BB1DC2
90048D8A9422045AC8911B05AB6F7A67D8500EB3D63289A2A81EA6B567EE51A6
D1298EE2D8B405DC601123A82558C31CBBDDEA0FCCA31EF963CAB223B208068E
4BA3979999CE1BC740EC90A076CE48F0F4B7F2664F040B07B8CFD0A6E2F893D6
315C69652F9272F2A1596C6E1F9EDD7A35EFF5DF8D3C2EAD0BD5AD97E55CAC10
0AE563564FC1EA11E43FE6AA6B6E33A3AA245AC6A5AD3EFB0E11E043CB68013D
F59483088E0697E444F8698C55D537D25FB79C4C2D55C1F6110A42D0F70DAB4D
6B7E2187A3BF218A650738B948754D013C105E7BAD6D744227137D55E6CBCFAA
EE61D30AF8E103F301AD9FF8FFCF4B8DD9CE727EBA8A6BC0FD4F6B67255DF8BE
27D7D83589632EEF618E6AB28D021183BAF9D8A0037037BA321C07F827B16443
2C8DE36D5E78373124E8BF78ABA7C50551A09B5971E03E3EB888EAF0AB4A3166
F740E482F0965F920B26577B7C6DB393CE5605FF93A95A46C4E63570D71786AB
04B97D1A022950F693A42136142D77A1741E2895CB2CF6F6445BB1D04FA90E61
5D06A805EF2EA704243FB382621C00561D1EF7811306D168A9E62F4696441ECF
94A72E8726982C6F8B442492E7A89D2DF0204E657D0E44FCA5F79A1E9C5541D8
B6827760CEF6C16DD3382967877BFA0B93A03D045AAB661615810AF7ED7C6593
BEDB64F65C63D698827F0E93C157AAB6B168295CF1191FFDDE2C4273FD94BA2F
2FFCB83D29DD6A50358C8FDBA420A0229625A339E8C820AF2EF6A66B248EF129
30D1A25B44D5A4E5B148AB91F804E24C582927E6F48151E720E33CA846C5D597
572F80E751FEF2DACB35DD9B875F3E5A4AE2D89D3C6ED63DCB711600330F1417
DA1F40D84C12A322677D69C0F861E429B4BE9DEE852319C28B522ABAF81776E9
30827FDE9C90C74D2A64FA489C07010A4C6B242FDEC958DC0863F7C2FA68B4C1
F7EC7D7AB9112770D2CD76176902336820FD82D95D666A1DB9213C2142AE6971
B5ED122B7A7F433757E31BD03FD39772A06A03C9206CE613A0838500B284B3CA
2F0DE0C08733E8C1559F67CEBE47ADE1BDA0E7CEAFDD1604E3B8134C30EDC7F9
79085E2954CE3CA0D2E4E4B9CDC079B013F0D0EDBF29C1E6D80AA8ADFE1EB1E9
F77B0F4A5ADAEA6CE251EF71BEFFDAE1393586EFD57D196A73B5C088FE4F9FB5
3692494E608EEB4539D0D52AFEED8E1B01705929B12F019D52B5BBE0C33618F7
6E5C0A74428FD615C90C73D448BB91CA08D908B1C5AD935C38902B5469A49F09
EC1A7876E8DD42FD5C3DE3159D9DF15FE04E7029FC6AD3E9D446F1AB2C3BDFEB
E7CE3D69F8BCC18F2DABFE7494F7DACD240188CAA8E8A68468FAD75159CACB29
3FE23E3D58DF77B86E4DD3C751E3FD6A2B87E975711641948EEF058B9D3996D6
4DB81CC7A590D6C8174249FD01A3CF2301753FDC5EBCB8380051AAFCE7D282BD
2933080309FDFD0B4116FEBF804101D3D13B402FC49699BE53783482D967781E
BC555F3282E2BCAFA32FB1F0E30855AF3F075CE9B88F68B42209AF7ACCF23085
F7ED4D8509871D9F719C2369EDB20DB292B33494734B26CA503A2772E29982E3
4B79142482B2FE78D03548FAC2D61AB34EAE8A372BCE29959443FBB59A366BC7
6F01E419269F520C423447A8D65255FAE5E27B9C63E82B0A49B1AA35256B8497
52CD7679FFFF591B7ED1007C7BC09E13E90690A80D05258F4C34FA1B8EED52BC
69654E690A5C74429563286F8FA468D4872655A2BD4F3C20B836A621B06F20B0
75709FA0A990631978245ADC08182F3E10DDF614AAEE0D8590A322842D087EB0
AF8E8AA7D6F4DBE64EF228E47D370DFD699A8218937C7FB7E4CC3278AD9C30ED
8DF3DED701222812BC62A9D7E1C4EAF968FB844A8FA4414EF3389EBBE3DB6025
CFCA26CA6070704E3630A1513CEE9710990BEC8105FA72C8099CDDB5F3D506F4
0EA4C8D0222F3F3AB0946A5637BE323E2DD2566059ECBFE65551927772803D96
B38EF4647D674AEEC41A3E496FDEC2C0A1F90C1F4FF7DF9EFD027E1B0B5AC907
6C21D22C18A1C53D4AEA7E58B6D70C1AEA9C0ECC5E1787985544273ECCB27B5D
1110AFA362DDF433A635DFBB1FA3D448B363C36F9830029A7DAD8C90A4B520F1
284E1B7C20D28ADCC3E4136F2A460B352E1EEA4F86EDB1EB6F4647F4B1AEA267
B4E0A71CB490EDDD78DFF769BBC6250EAC584D3B5E88ADD1EDD93E67F93C6246
1F32B8A683D919B5E13A2C0F34A122D407FD5C0C1472F6404B1AA6039BCA9DCF
908AB3F675F9DC9C82900535F5320F630BA5F689CC6D91517EA4B3FE9084C6BE
93FAA4D990B61CBA9199A8FA809CF94AFA28F37EE59B9CBDA3DCDF109071C246
9B43DF46DBBA605CD084CE610E61CF5F7C8B1546B7A57002CB5631ACEA34E8DF
51E33B4519F4CD58195898392B0BB3E553438CE544B5058128680D64EA62CEF4
0AFA3F39FC3C54A4A17883331B2BE5142DEBA285A9E7F0A895EDC8320DDD37D9
C65BCE5A56F2928E545E28572B72D84A7D87F06B58F51818B80BBA556EF7778E
22434ECCF66634DE566772DFDD2A30ABA1A941C458A274BBA0351E4A7A084BCA
DDAAA1829308E35833969F6D061AAAFD527D64E34F1C51ABDF3E7C0F58421A0C
349D4FA4B7255A9A8EA08171D1D7C12B792A176333ED01A5122941DB251077A3
1A0D8D38BEA3A04FB8860A6674522C415EC577C817BCF6F31DD2117FE34C0EA2
AE82D3DB11C4ED6C919FC1FA6F5AB1D7242A2535B1C2CDD053133888234A06B8
6A2BD7B5C158C66AA311190D4A4896F091965DAFAA7E3EE3C0995ABCEA6E2B08
F381570E909DB6148FB679B603BDC820272D681B750750771CD6D3BC2DF4F7B4
1A944047854CB602535D1A86316C26130180B89DC4F46FF9216F1C43F4414B7C
12B4B728DD724C21750D736597A601881043A313A28A9AB1E3C64875CF107E8F
35C40C193914BBC36385AF5C270294A1A3452C92C1BD752F6AC664DF18166F27
FBFA72E80A623404BE5BC7D30BD640E7E27336B7A9B4AE21259EA55D850F6F93
4F53024260F7BD161E90596A2675C1FDBD11AFB9323911FD032BE7E564C7FAB6
79CEA5B917B950C284946E38EC08F49F775D093727714BF6D9389050F742987B
23293F56AA818A139B32C83267C424429C021471F20C284307E548093CC81AE6
777C56DBF5E1072D4D4BCB8E40304AE711FC4B41FA37916DEA6B6E1C655A1FF6
DD291D0E93846CCC8A07CED5336A6CEAC4358EC3FA22E15FC6721F4ABB862D53
0CA00AD0788BD3049E5CEB2340F02646EFB41443453D50ECDAF201BBABA44CCF
EFFF9B865230212BD07C175E62141F17DB11717FE7446DAFEE6912DDA5F458D3
4D1C7F5344DE2C6F014708F5553AE4F0B9542382A1C259FF68C4A0C748338792
16417295BFFF297AF398E3950E1EF3FEED36060BBA2543B9B498C3E4A2708232
67DCAF7058E9B8EC4D4DEE308AC29CAC65B092BFC794C1564E2626692F9FC703
19708B99117EA400501A3B32335F7D0EE919E869D196B6D0B8B8D320FDD02BC6
1BF9F6E2B6133A81CBCC7730A01122D4479B1F89E82FB978D0D24A03FAF680BF
60399EE11BCEF574971826E4886B54EF0C41B98D103FCBA090D7AB5C51E5FFC0
F527B998DB372A916ADC6A8A428E78F3D55F1C31F622A6C3734F088D94A992EA
E056707765AEFFB6AB533A5CD92C4D474E59E568C7465E6DCD933AFC7C4F3790
4B6F5DFC712B24E35CBC11D4DFE8EFBAE640A2F4B94F244D365B74022510352F
C66C6F7741A542E9CDE296B257752B47C6B1775BA2F7BFE00578BB6C18A3DB61
A9E84B41CC5A6B7649667F16ADA21CC16C2583E2E648FD2401FD0399A1C753BB
4DAD4B0FF3779D39D39D12059B64E8C6097B52850839602F0B1F0FEEEA7EE276
418D27F5CAD8E57391C40580646EFDA7DA8A66AB020E97AAFD73BC85B6D000AC
2A87C2BC9484005A11A8D4F968E95FDE6C8C6BA0967298887DF4D7213857122D
75D80CA3D75F6943FC34C3B54D1C354D26C28195A1F4C4CC623B30B076D4861E
82C04453D4CC2C65CA76AFDBB19363D152800AF844B9D1B5E1AB66E8AF5859BD
B0E2851C158D45F5E84699D18551A4207783CDAF3688E57564736CA6775316D9
2B8143404D30EBDE8107643EC1A42224B8E4814429DCE7946A807758A01838E0
141592BD2AC2DB0D4C915CD937F84DD4846DC4846C00E7E2BB6704E49C9532F3
F0CC18641FBD84163C13A651DBD7831E8E7C54D72947F21F16DF288D1A5CA669
D770108E7FE174551C0EE26041EF1B070725DFABD7B12A4D829B3566EE4095C5
7D3CCCE5EE3519577705EFEFF28C43E7DEE65AE6E560D47F952C39B1749A56D1
DA5C807E432D7D2702DB352D0874EAD824F18023080C877386758B23A96E45C6
1852F2843D3F9A1DFF2C3DDEB02CE7BB4803B2A0A61D368796A182D8C2AF443C
658828592374FC674D083DACF71F604A0AFFCFBB81CAD11C88FBDD52B78F5AED
0D796A9CE0E33E3036527592B1D69EE437858A7976AA4A78113262818AD02719
B29A2B67304DB3A65C7EF35535536D9C5BE011951A441FD377D2CFC7C7963CB8
99A98A3C8D5D8B0BB2B740DCF93E68733DBC8F586B49B9227973B015889411CB
94C0E308DABC61E159A4C4EB45B745748568C53CE6B69B3EACB3F24AA873DE73
6D9C6FD28A8D703000CCAA4B939D264D08E4A159BBC7C6341DB48D709584F711
FCA068B507B09D16F7DEF3AED93DB4833DE783489E25D03687CD3ACF9DFAC7B5
F5F6939623351F7897A2D28A562A399571F84A0820C48883C74F2BCC3790E978
E16E5417DA88F96BD9BDCD74ACC2BEDA6E2BEEA773361E637627759F043C1861
9B90F80A589C2C8EC1AA1E838FE25456978727A53FE258098901F111A7425BBB
630DB15011FAECC4B03F546FEE73C1E464FADE7775B75D940E81B03B8D7A042B
0CDB0ECA55629E34F8E3E2E8E786D9D62E34C074B40A7F3515002BB122ABECCF
E1E03229A82FE285FC2ACAC53F94EFD31F3577B9FC3BB119458352BE197300E4
86D7249A5082A6B3180DB4B139BD456178FAA98BB6826A8207BBAF36E1161F6D
D9089D5623E0001AFCF643ECF742A8453A9D2758CA77890A464A3EA6FC9D75C3
11EBC6C0EBE41B60D7433589EBAC21254F7AFC2433E8B7B9B6113D8847658EE6
877655487D26967D00A20FFCC94DC620005F5CACCAC594DE5EB93F0118FB2E20
CD1CBE814D6C01ACA5E17D68843A172A71F279887A4F86D9F3618ED7D91D4326
66E57CB1914ABE8BE7ACB98C4811CEA7B4D290DC1C86949309DEE5364DE5B49C
70F2ECDEC2EFA9B2AF60BAC4F6DB4FEA25840027FF12C9F7602CC8ACFD0EE9B3
3FF560F7465653C2C23C1FBD2BD0407FCF161C85DB5EC213C9FDBFC89B3C3979
9AE44F5A3E1D5E610495D02517B84F6293EAC0112FECCB61F0112A6C9F89A713
1D97DF36A2D973D16459BC4D3085DAF7B24B49C7570D3C697C179C946805941E
E22124CC8C58EB2EBEDA5ADF24760826E4A999F4328653CF50DD6B7F71DDC565
4AA34EEA491F2D7AB04FECA0F01948C92D20942E377369FCEDED54746CD9B7B5
E5B94F1DAC724276506575DCEA77924A1D92648C1C452C254F13EE5D90FAE480
14B52B85053185AE6C7B94E6A33E84A3A6237620A04B5119DF29F51D1571C321
840BC8FA3E02D9B557D95F9318698931A73805C82B226CEDE9A61BB867C4527E
7411C1A131506A3CA2C87E39EE9FC470F7F65811B627B93DD96250941C0BA328
912827FF48B73C5DFBA232FCC1AD38BBDB9150EA412E7DF51429B7B6654377CE
973EDEDDE13FC66A76DABD77A51936B3786D5BE8A3D4096F80B49CA3444C5B60
45247A569FCAA3391B482E0612F5CE32B6384AAD4FFC5C99973AF211F208276A
C634870B036B19AC96A6DAADDE3736D9FABD3C182FAAE9440B58A6AF8BCB151A
AFAE4F8558B9765C143DBA626FDFA5AB4B294BBE991148677AD8B5669645C18C
FC17C41C8564E1BB513B733B26554226C36ED08193BC17AEA317A2289F219316
F508CBE4E887AC65E92084CFD82369D63486358A3C664796214D38637FB671F2
899551B5360DCC3750634B114D6F621D69AB89D06E3B527A4F069A81C250F9D5
706318812C947CBAE005F11DEC7174DCFE57808108FE0850C4EEEAFC8D4D34E0
0143F2C6A3FB494A40A4FE7E3FFCEDF00F4208A7248E9EDEE140323FDB7E21CE
A8A447CFB3D220C234BD01F4EA4B92789040C0DDAF30518229C5F1B4E75AF857
E520FD96C094513D5E4F493C82596FD03682498B942689DD05A04CDAAC4D7B00
9365A5D819AA9919C9225F5F1B62677D65FCBB4D3DEC41D563242A2203F22650
DC04F31FED0479DC55F0BF99E70444197DA92608989B28EED29B985455F21E3F
DE3C625BED0F0A6A493E25CD3F0DD7BDE234468406587E1A7547E198531C2417
BFD17CA07AE4A60257F868A390B50A1093BE390B4D12C1190F77583D9ACE6E0D
83A72C04E19BF49470067EFDC747B8C2FB4A1AA9E7206B2DAF9BEB8944510B67
B07AD2C396ACC7E1A2A6EFD028419BE7D17B3B484D1FE3DD846CAFF74F2C5361
B742FF96A65A84925E32387B350A19EAA54712A72C849879542E94943F3ACF11
CD7F74F83C7B2E93C4C9A6D80A77DD2251E3CB0BD8EF6B69DBD8FA9A0CFC2D88
088C683172F8E674F6DFC34E85EED54A89FF2E574F3C5DF625DFE33350D40518
38C745A03B7BF4272254C14B582D9203A664F1ABFBDC68C6EB5DA2100B1CE7FE
EED0E6D607AD75135ED8A6DCDC7694C24F72828623E396AF33C99433BDC6B2F7
19C2FE04FEC7D1BA458CB5EA5CEC447C34D125F12A97B95FF290D8FC49C1BE0B
B880430E771C5C4B4D30628EF700CCE641F91F7DD6AAD816BE84FF0915DE4AFA
3AE138956904ED43BF81D91FC48996C83BA1F887551C828827E953D986494B63
29C425A36BF0AC12F934034942EC39FDAB7A8DFC0B839E6F51AC738EC9D9F08E
9FBD7424FFBD2CAFB6F4DC58BE324A715A01F6117E2214F6C9F18B47F79D2EF0
3120EDDB85C690201C218057CE561CAD4687459ABC531F9999905301AED9BBAC
B23E600779D354BCD9672A9F60A1819563BB4C077DB1924369C4052F24D0A6EA
3D2A09BCFA5A68262F473A7590775A50BA9338F84D428D75187529FD41C7792F
9BBB2401E819DFD0CDA2388C4490263C412C392B48A92C8CD1F091BC2BC49F5D
EEAB9CCD4AFA88FF6BE2C5BC1621D0544A1D629DF8527D995F76BDCF4CD8436B
041CCF7CDDB42A57C0569A05D8555BB63A83C4B469CA12D771DC7E88DD85AE57
2FD16D553FF490A8881613143025FA5255EEDA6CEA2DD722BACEBD9228D4812A
CF89DAA938793CFE447CEA6BBAD9AFC1F95E3C3B1869E5E17FF4831713146776
2C9BF8003185F15E529D8759491B6CDE61EFAD88C89B261A851E1C33CCE14635
DEB2E05824EBF9C538E89A2D05C99611674673F9D5EC994171FE30B1B99A43AF
947E39D08E1ABB225C123EBB545EBD29509C2BB637BE1A089522DAEEDA0D07AF
E8D40C40AD1A2FA477B2ECCD71EF6673D3754D4098480130054CE5399C67DBF3
D7545D2DB40EE147DC0F3BF727FC075C0EC6D26BC9F7E1CE14A8B6C66F2F32C9
4C83E7ECF3DA9A6A3952E948278675843F30F0E240A3C858F95FA18BF0292CD2
5EAE3A54A13A6473E22C18F17EF0FF72540AC052E7492D43EE98D4CA99AA8869
2E6E5A1340C6F0BE57BA66DB60C5FE929F3830388D0688F44EF18020D077FEE9
96899A21EBB4DE595A2E7DBCFC0E5B78697C9C905256C6A0C9DFCE760BA69D87
458F144C71F3F6C006DDBF769645E7332BF8F70E964143A452C6552A16FBFBAF
77676CF1AE4C2333A742AA50B2BC99BA83E3A1B2144042286F5F98D22A5D894B
AC7F5EF002D90E864D97B7AB16147E130E254DF39B4DE5143ED3926681D8B9E9
CF6552BBE0D42872DD9DA9491C08BDB21AB1FC26A6D947F173138A63D5103933
E296514DE380F683E1D22129991F82A55E58F59C374DC6036820AA6136D1E2C0
5D4FBE2A6E08E7F1180BD845EF1456740B80BB8B3C209E430BE3A6F56186C1D1
911763CE9DA48472C549ED825E950EC8D7928AF0E7DC2894336A9ECADE47B4DC
74D7CCA0F589AB74AC125FE4861273104088683A3770B135F4A738C033F6E4D5
347A2F6D123159412449A74ED4B78A6734D6CA21A2C77E5A61D6F26A0EC700E6
C9105BACBCB18D2400A78A54A225F55C03BF239F8A59AA3D3802C624389DD59F
2512E58F33B02B60A7570B565BF1B5D459BC5086CFE6D15CEC7913923CBB50D7
6DDF6819A386A45EE429FF5BA1E03131263CBCAB5465F18682EE26B0C0183F5C
2EDE7E91436BBDB1BED543FED880A06AE014F0865E46AA7C359D1809998CE298
7EFC28FE7407656D745B0D17C70D223974CACA279FC4F90E8376E83D6FE2113A
9EE1A2E8025F50740328492DDA205D87E329CA80A9FE42852A8EDADF99CF8698
6B055CC83D98D052276D9E2CC97A6654FF4403192B08D953A4B426E1F9178041
58B58EA13620284439207FF7E2A5DBC030E4CE96FF77C919DD8E0017DF27CB06
9CFBA2BAD41113F933E13627462CBC175CEA4D5D29D872061B3852B74BAB606C
59278A1E77E0E6A802ACA635507CEEDCF6C1B0FC766AC887DB1DA6CE66E846F7
B4067114798C59C95370B2F2F405A1848E6289C282C1856749ACFFA53C079970
3E46B427F76CE7B080BB367C3551F2ED5556471566FECD5039C3A6FAB59A1AA7
51F0D4383D0F1E36F7928907CC086034DF92AC43020293426C277545BA022F33
163CC6508CDC31C0470A784AB80E8594BFFC04AF05D52DB4D6DFFC9C31360741
F87E8645BA1B7AFAA7230DA54062238621E5289C0EE9D5485AF0AD44E99B6761
7BA1FE4C291FBAF9CE697C8B13B351DEA8E379198CEEF5EDEBDDA81177FEF59C
DA241F83B6B37F11198F42B11F9C08EFAD6275F51DBEAF362491EC3721014002
30A4199F6F1B659E5AE65B3E080DC7BB7C80382C6B970A39F150893C46A5F9B9
F75E370506DF9E7330D62477FD69612221C028EEF1348B2F930C2F48848B5D7A
1EF615C0FBEAFCA338100D28287AEFCE61EB5CE7D7CF21012FAAAB5EB8871F33
0711806FA0854CD99F2570790D0DAA17682776340B82B8A90EA346A50BC54A0C
B4702400C4FD2C73B95FD5FB55C71B285FCCEEEB26D50B090806935512047E26
E822204AD0A821970EE28AFA1F7687FDBA1C70DBAA302C78D76A69961E1D88AE
3053512356C8FF53C219A12F565C667ABC3D3F96184C707F65CD43767945190F
5E01B5A4078BED5BDD6607832F070BBED729B5861B4F5E737AF1F251B5A9F622
C8B3AFE58E7EAE127568B5173DF05F232F56BF2580E7A4D2238EB6AFB48F63F9
815971A21ACB8BD0B62D3B215DF2113202D5D2F576E1F72EC3130362318D8DF6
5D4DB864704C455E0DA33EFE399FEE5C5BE32AF0A06EB7C828CA4B63E8D60C36
3F963659537547FFF436EDDB5C8072E47B7B0FD39912A32B52C936C9825E30E3
ED53007016F5C4875E7552933A0729842C735843B27293772117650C8F7ED576
248196F12826ACDDF600CD184FA4E0C7E2F69DA1CD29D8628493EEFA925E555E
777F1DE38E03CCE2BC3335186AADF2217C6232035495E273E73905E9E9D6A3B7
906E4D48A3A39BD85975F3F241EBDA5D2D945C30D5C0A551CD4D2A48A636BEE4
11A32F6835F57BE82368ED750662BF4C11DA0D5A0F537F4D287207C7FFC6E20F
6F6DC2E40E96642662A1C98992026D3DD85F29ED503EDEEFE55AC87A8B23B34A
39377930738ECAB4BBB635A83B4C8E134F41CD562616FF839DA578E756EF9189
EF8FAF67D779D015A1138E4BB8DCA432854EAD2CFC818215F877181026A73E97
9496F85DD8E1C0E352E7F66C743DEBEB4CF432B95A2B3C0FAE904A4A11F80E03
7B592C11E296ED92930D963FAE1ABA0FC76B3556CF80AD7F280AA4F676C154F5
34030762B90F01C6F331BE66EFEEF08EA88472125E2A75FC117F47D828C1D85C
10818EF18C74347143B7CFD930E1344797AF12313B184993593ABFEBF114CF89
46EE8465B4A988FB78AB648895F4A1794C44FB3896000DF774235A8CBA077399
5C2092E8FB78627791D28E1555561B7C9D5C42A843D778138A69FE89D391CA58
3B311FEE5EF3DCC564138D5F8A6F16B79DD6610230E4D702ACDD8433869A00CF
9540DB39A7BF129992AE8858437E898B1B4F9465BD0795E98988CAFF8DCCEB5E
BBEBFC97B881EB8CDB1B3E4E6F06489CACE8037B56E8409322D1CF9BFD2BCA5A
3ABBB291F38323A65A2AE826F82143F4883942A331AF9CD39F88612DF7540C86
BD739CF7A981B9521497DFBAC81763DE0C2201160391A96662D2013B5DB3BE22
4199B9A66B1E9FE357609F1CFDC753E209991B616EDDFD6C205BF495D19E066E
BDCC120364487850D969CB0B5DE849224BD7AE1EB02067F2876A59971BA36AAD
C8EAE7AAAC95F6BBD3F16968C5C1594D810D62088CBCA32632C9BB9ECAD8585C
0A566BA85CC1377385BB356C098CECF878E8B980F30683106745A11A6AB0AFDC
F0B639E83AC9EFDDB8178B7D3E1521B41B2CAD2674EB65AF03743464DBF22BF8
AC9D41862E39CED5B932ACB616AA561DB6A9271F9960257E530186D9F7777E9C
752ABB3E22207863BA7A8A3E4130C6F6C1DC8B5C16E0678973139303B4E1127D
1AE1C16F994EB8141242543530007DCB971B97C0E2120D0CD10A9F74B8FE996A
D06100FD5B292D36CEA0FB945A3C5A0B4D728FBE6C4F6997740B4FB7EC4236B2
3433D4D67C7F43CABD9485AC5EB1EC17A825D0A0E86D7A4B5E53923CC8E952B4
D3B314FAF270C91679C516D292943DAA3D306FA6A6C80E08D641A6461BC43123
4BD84602C301BFECE454752791D359647348C40D8A0A0E926114921AFCC53A25
37D0ECDF19A26E46065DA57185B6608D1BA5F445B22E672CAC8588A211FD347A
3741D5D78D4035DAB27C8137B70CD84C4AE029E3F2AA3E212ADF4CC4A194148D
2375EEEFEE04EE19C90ACC97F4FC6EBE197AE0EC5ABBDE789D593B9B407E742A
EE65473B7E53CADBD40B57A0AE5B7D2621B2DA2C2ADC0D80A01452C56DCC571F
F8F54EC991C0124519E6A9F461AB6F5DD069EC27E9A5005DF162A2129B3B3D3B
484619C1F01436291EE017CDA78247795F89DCEE93DDCDF5BDEF2502FF1207C0
91D109CD1CC871883AD89548DF5B7481B3E58EE25E3881311E524EA9B71C9867
D49718F367E1D4A4EF32F9D97D383294215BA664F09E9FCEE444FC6207704147
8AD0966FF1E69602827DCEA5984CB77CBCBE2A67ED9F3D910B7C806350EA9DEC
DC1F5E7C2DD08A40E50892156318C6583AFC0A41BFE996107D8A9D33679BBD27
3ED16AA85D51B17D94F88AA583C260F613CAB9948A02774D1EAE5D56436F799F
EF3F0584BF6A054602E06E106BCFD498F79A133F25B8E6158D8A0FDC1590F822
07BECDBE3DAAF7C8221BA3B9F1120DCB908E2EAF41C788422D6A7A9B9B86697D
5F536B7F629D16A38DF697583E7D8FAC42A9A3140D810C4FE92F4907DA290C72
E34E4F9F650FB14AD17B1DAEA4EF74139899F1E1C09F8FF1E6C4DE75FD07844B
3FB28B58EA5331191DF3DF3DE3A621910BDF66C49523AB412486BCDB4820F4CB
3291CE9A41ACA0ADEB0315022083F0811A019FD93A4B83C2E6E8804D22B43AA8
651A85CF7843D73814634A65D5D55668D83BC2092400794A25D7492661A7449E
32CA9823D8496D31A9A32C3F9AD73596B035C9C578F6B092F7BC37956F80CCEE
E1F5D40A2CB83D8CA1F9FDADA04EEF13DE55B0DE9007F979BEB50DDA3055A62E
8612D2652791EDA896759E4684B609FC3D5B36E7AC4D4A1125E2A4D620CCAF90
E15A17075DD175231BC8F1C5A2F5A0BB7C03A790C7A7F844FA2B0A2333C36369
66C42EEA626D4E7F9446B2217C10801F763685200D9962743F87BE8D7CEFFD92
DA6B6D21FDEB1CF0A03F4898818B16068294BEABA5074A7B5E7DDF0CA0D291A0
CDB9B2D5E9CD702DDF367DE74456E735D17CCB871B99897D0BBA064A7B92F926
25782CA9F9697A0626067577A9EE5E7B52B5246B19C8ADA402718644139673C1
1CA1485188E5255A05E61406799918FBE2C8BB1F9CA5DC5717F422000FFBB754
78D5E86A71947996BF8077B12CA8BED5584187D37FD12C3584FC41DA97E4FA1D
20CFA46F46267EE951948B2DC64C7FE7D68E9B6A0E94615A2AB736D590ECE242
5357E676F4CF4672A31C61C88D5D64F2E126DE75D3D47AEB690C6D9B832F8E57
29EC88E816B7B5B441FCD133FF75E2A253BF5FEBC9F992C9273AB571E93C4DE8
86D329C3337B472DC0FB294310B8EE47A1782EF421F80E0B14C8335E0F63827B
7FC1F5EC8B21ABE2269C9213D8E0FC90B219B30B816C563398D266F1F0ACD935
33CA2E7E4A79601FAB20A2E6D922349DA7F78761D7A69E0B802E01312B5F07B9
1A2DEAF7DA65BF8005F21B776CCE2C2837AB8DEBC456F3E982A57381220C0236
4DAFAE4DDB6D720621372C43CD6C49C6F197A4FB95A87A0615EA477E2B09553C
6841BDD29A3D1E8B074A54CA2016116EB8E898FC49DE0527DDC6EF3075A2A7A5
4EB72CC8E383CE6608C36AD2EEA789548CDDA321A082D67810A72FD89E53D7CC
C94ECA4BCE0E6A6B170AFB5820A4DB3DF719778F9D25786C0BB210A76D2885FE
B101EBB116986D002A33547D959BBAD6C964D64BDE5E628CDF07FB4B32967F5C
14AC4DD335D9085BFF427D2E5E60B9BECA89D10EC6ECFE773D5603496A3F512E
66236B73DC67E3F9BDD6A65AD2736FB1958D095E8318714E3038C58A7A0D0686
F06276E41D942A30CD69A10E08F0FA0D168D1FC92412F0C1B71BE8F957D042D6
757845CECBE34DE9895C71AAAE610C9DDF55B277110EC877214B72A2665BFE43
3F3BC1BCED6B4EE0F6DA9487143595FC9EF5DF4651DC76FE94606B5998FDA58F
4BE2FD503FAAAA0B256A1C0D1404AFB60631AF5B7D3097F43BD42DABB4526F67
86C81527B90F8CD5ED015CEECB310632234B2B89F27FFBE7D2AD6378540A96F5
DDA306F508260F2511CB98189E4EFC41864B6089CD408190A1B73CFAC9A2F0C6
518F7BCE47EF4C7B2C2ED4875A1E8771A28506E15FEF1C83470FEB08A8092EB8
C795CF07EFF3CE10683BEA984B9D57F448E5515AFC7D4BEA8A5136D5D8CABD46
4DA1B7D1D869634530DD6A12C6C55A161474E690C71BD674E078F0A3E96D66EA
AD2A626FCBF77FF7D9F28697151BF242118A03DD180B3F96E7CEA9B294B9E111
4DA3B3C32CB8537DA1EC7C039B6A7197839801A518E634CB81466B0C0B8160F6
821155F04D43B61D5FCA7316E746634AB6ABAE9CFCB4E88198B7310A3DD57B13
6FFF1F7063609D4D16BD3FA72E931626C44565082DBB930ADA6E737213083D2C
35868105C253C82BED849B5967A86EF22A896AFAC6CF9E29480125167D4CBD6F
0B6D2E69657E99B99EEE232EDC11906C3776D0EAD90EFD7612884345DC7000DD
7ADC0282DF6A89DA92FC71C9B81A0540556062CA9A11590EEAF80C829B16F108
4624A147759BBB495C5DF92762DF635F61605097E66A9413FE021E69E119676C
06671330336C9B684E9D1E1129DEE75FE5DD7F0AD2005F74FBC793726DF273DD
0F4D4D1C2AB191FA007F8720DAF5FC7B2A98AEE9CD5EBD007F34611616DD0B06
3CA08DC108A42CDAA764A7FFE6FC9EC8E617486BD6DDEFD5FD160A1B904719F2
9C9976258F2939387796B309F6A6C7DC9E628FCD457B2FE51B27664D728AF5A8
12C64F04AE53476CBD2123D47EB21E138D60426A48C45F3DE5EED14B120C6272
DDF800A4D407601B22C0E3CE5D83F7BADAA414215C35BD78D9E1BF50E6260848
5F0F2B644E978377B264DE44B90ED17966B1B6AE16F44752F093AEE74531C7F6
4D1AD0DD76CBDFC32C1A576278EE608EAEBED8C014DB01AD03CFC8B790241488
7A2DA3AB45CB803BB81D62EFF044868D99ECE99489B6053018C3A67BC862346A
2EC147C680689A1CB353E56AF55431F902C010DCD21BA186F29A07827FEB7BC1
E8AF404F9DA89DE2928710D303311BDF10AA422BF241BE359454AC5F81215F6E
FBE9D97CE44D7F359AFBDD42A0A758251138E3096A230D088474BB110665D588
0B8D0F177DABBF60F4084DE2EB11CC7924FD8226CD56937FA6C769638A677363
D7A24CAE7100B31005D91BDBF2667548F9CFE686FD35A55D1F35D02C7870839F
341631C1929473CB7E1F5A6E9341E09A8265E3747FE544D61ECF23D2FC2BFE80
BD42E21BA294FBB0EDD836B424CE17931E7307C35BF9ECA6EB95FE84DD0D3416
FF5796CD1F3B6288F58A8A519D7BA0BD279585E031E0FD61D56D5B746F133EF4
1608E6E47128F1D04A4333374B492039E48F44976039479BD083279C882F5F33
DA81FE33306AD99A1C79F11DBE75CEE84F29A04D110EAA5FE04B9052EA15D67E
9ED3361681E6FF90913D77B6417FEE3929D3A84B9F9FFD91EB22D6AAAB270EA6
6910DF2EC24185BD5534EF393ABE031BF93394FB52EF99C660A823DF28E381D7
2A8B6B3F2B5B11060552F1B09FF3029F9D94C93E82FAA0C259CF702A71628526
8557A14A538793C574A33D7CCD2115295997F811688F462F4AC31930512DE94F
D52C087D55939B4D2EEDBECECF9C2191A70EC1C7DEE98D26231F8F3C9B3740FE
2E9D8DCD201D01C9F916ADEAD866B18252D0E4F6A37745BC2247FACF97D5547F
4C52844E7BF83082AA260F37CBFB08CC71913EA2E23FDB839AE674357A585D3D
28711E2BED220A4FCA847318669B490C73F96D18180D9C9DACD1D7BB0470DCAC
49BF53BE424A7808162BD6F6E9D038017588CB9BF6E595A32953CD489D1726EA
2B433615E08776CBA712BAD1D004C3F404E256A6F9605EC3C46EC019F4277F0C
FA8EA9DE01867F1B01BE1D71E13F9F81664F4EF5DDD025CEDC0BC9A025E84E32
C35F5EAF1177739126415A2880B0DB7EC84A80BE7D947D013C2C4B899D33CCF3
CED0C77F3855605B73BF0C0B20D59C6795B6660858F4F1529290E7F3E38CD8AF
24D90FCAB0F75C1CE40B01AD6AC3582BB659B2323E430A2B309FA5E16F144288
8D9CD0B74B64A60B32469B6EA9C4E6FFAFB682AB7CA766F6857F4F2E502E21FE
4ED577DE8958D463FD010D0BB6ADB2416A6F6F169094EACDF006A4F743AA2031
30F515E29F449B344AA293FBC22CE2DCE990E09D5CAB2BFE09ACB111BB0CB063
976933018A2A69343451F1A7F9D0FF69CCB5AE392E24C0A9F12423C12E5D6E4F
B665C74E6F48E6BC1FC8E7C68979D2A63910BBC151C6289D61E58A788015254B
FF55FAF68D0EEDFA2147C22DA00CD208BB478A9CF32E0A27A14CCD63C093A18A
0189D846462D566672945DE16FF2CFF6D6BC4AFB57901E581B4AB0379C438393
38B49BB30EA6AB8B312335BBC8EC12E47936D6BD7A021F54C2FCE90EA4D11D34
EEA2775ACEE7CD669F2EE6AC23D8F2029F77AC2218E2F7486F8F8B3FCDCE7027
4856A8F43270C79AAB9C5C326C2B5F822241EC1DE2A4AC24178C519D70CEE481
FE3CC59840F625369D8A5100BB30ABC085200E5A7C513FFD177EFFDB7E9BA69F
4505EEC58D8BFD1A7B6C3D75287A07C8195179A79F9405FB00645C4DFD429064
8FDC1997267A159FA14FEB8BD6C969C2E2CF4F3AD59D06A67C7991CF73CE8782
DBEEFA4AE2E91BDFCD0896A0F9E449B89A0446A5EBEB6332FE583C6714A4AF09
865766557097334A561813A2988D56996E25F88597D3EEC89DD76169B30732E5
02C92D355CDA950A13AE567F6309018583ECD0765AC91C3ACEB72BB243DCE56E
6C16264702DCC4D614395A59369EABE7D70920165DCC76C7545FA28F2D619730
817C5E978A945D2638EB4A6C6885D9CB4A18D7E85BC12BEBE1F568D2BAD9E1AB
820DFB1D11B5F02DB29C64B046ED70F9
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099151 1000 600 600 (designdoc.dvi)
@start /Fa 134[40 40 57 40 44 22 40 26 1[44 44 44 66
18 40 1[18 2[22 44 44 40 44 44 11[57 48 53 2[53 2[66
3[22 4[57 57 14[44 44 44 44 2[22 4[26 26 40[{
 TeXBase1Encoding ReEncodeFont }36 79.1666 /NimbusSanL-ReguItal
rf /Fb 105[40 150[{ TeXBase1Encoding ReEncodeFont }1
79.1666 /URWPalladioL-Bold rf /Fc 240[34 15[{}1 58.1154
/CMSY7 rf /Fd 136[62 44 48 26 44 31 1[48 48 48 70 22
44 1[22 48 48 26 44 48 44 1[44 11[57 48 53 57 1[53 6[22
57 2[53 57 2[57 11[44 44 44 44 44 2[22 46[{
 TeXBase1Encoding ReEncodeFont }36 79.1666 /NimbusSanL-Bold
rf /Fe 175[61 71 10[66 66 1[66 11[51 51 51 51 51 49[{
 TeXBase1Encoding ReEncodeFont }10 91.6666 /NimbusSanL-Bold
rf /Ff 167[49 69 49 1[45 49 53 1[49 57 53 3[41 20 53
57 45 49 1[53 1[53 65[{ TeXBase1Encoding ReEncodeFont }17
73.3333 /NimbusSanL-Bold rf /Fg 201[32 32 32 32 32 32
49[{ TeXBase1Encoding ReEncodeFont }6 58.3333 /NimbusSanL-Regu
rf /Fh 107[40 25[40 44 41 66 45 48 26 34 31 44 48 43
46 70 23 44 19 23 46 44 26 38 48 35 44 40 3[26 1[26 2[53
79 57 62 49 42 53 1[48 62 66 75 48 2[27 66 60 44 48 61
56 48 62 6[20 40 40 40 40 40 40 40 40 40 40 1[20 26 20
1[31 26 26 22 35[48 48 2[{ TeXBase1Encoding ReEncodeFont }70
79.1666 /URWPalladioL-Roma rf /Fi 139[19 33 22 2[37 9[37
1[33 37 37 24[48 52 5[44 65[{ TeXBase1Encoding ReEncodeFont }11
66.6667 /NimbusSanL-Regu rf /Fj 139[22 37 26 14[37 41
37 31[48 65[{ TeXBase1Encoding ReEncodeFont }7 66.6667
/NimbusSanL-Bold rf /Fk 134[56 2[56 1[33 42 39 1[60 55
58 88 1[56 1[29 58 1[33 48 61 44 55 50 13[52 4[83 95
1[73 33 18[50 50 3[50 50 50 3[25 44[{ TeXBase1Encoding ReEncodeFont }29
100 /URWPalladioL-Roma rf /Fl 134[79 73 2[85 46 60 56
1[85 77 82 125 41 79 1[41 1[79 1[68 87 63 78 71 10[102
2[74 95 2[111 9[87 110 100 8[35 58[{ TeXBase1Encoding ReEncodeFont }27
141.667 /URWPalladioL-Roma rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
%%BeginPaperSize: Letter
/setpagedevice where
{ pop << /PageSize [612 792] >> setpagedevice }
{ /letter where { pop letter } if }
ifelse
%%EndPaperSize
 end
%%EndSetup
%%Page: 0 1
TeXDict begin 0 0 bop 0 0 a
SDict begin [/Producer (dvips + Distiller)/Title (CS 461 Design Document)/Subject
(CS 461 Design Document)/Creator (LaTeX with hyperref package)/Author
(Jake Jeffreys, McKenna Jones, Spike Madden, Sean Marty)/Keywords (cs461 ``senior capstone'')
/DOCINFO pdfmark end
 0 0 a 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.0) cvn /DEST pdfmark end
 142 -164 a Black 0 TeXcolorgray Black 0 TeXcolorgray
150 0 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 150 0 a 150 0
a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 150 0 a 150 0 a
SDict begin [/PageMode /UseNone/Page 1/View [/Fit] /DOCVIEW pdfmark
end
 150 0 a 150 0 a
SDict begin [ {Catalog}<<>> /PUT pdfmark end
 150 0 a 150 0 a
SDict begin H.S end
 150
0 a 150 0 a
SDict begin 17.3749 H.A end
 150 0 a 150 0 a
SDict begin [/View [/XYZ H.V]/Dest (Doc-Start) cvn /DEST pdfmark end
 150 0 a 0 TeXcolorgray 0
TeXcolorgray 453 577 a Fl(EmbarkVR:)40 b(Outdoor)h(V)-8
b(irtual)41 b(Reality)e(Experience)1328 827 y(CS)i(Senior)g(Capstone)
1382 1077 y(Design)e(Document)p 0 TeXcolorgray 0 TeXcolorgray
676 2105 a Fk(Jake)27 b(Jef)n(fr)n(eys,)j(McKenna)e(Jones,)g(Spike)h
(Madden,)e(Sean)i(Marty)p 0 TeXcolorgray 0 TeXcolorgray
1478 2352 a(November)g(17th,)e(2016)1815 3362 y Fj(Abstract)p
0 TeXcolorgray 0 TeXcolorgray 427 3531 a Fi(Abstr)o(act)19
b(Goes)g(Here)p 0 TeXcolorgray 1930 5259 a Fh(0)p 0 TeXcolorgray
eop end
%%Page: 1 2
TeXDict begin 1 1 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.1) cvn /DEST pdfmark end
 142 -164 a 0 TeXcolorgray 0 TeXcolorgray 3718 -56 a
Fg(1)p 0 TeXcolorgray 150 96 a
SDict begin H.S end
 150 96 a 150 96 a
SDict begin 20.32591 H.A end
 150
96 a 150 96 a
SDict begin [/View [/XYZ H.V]/Dest (section*.1) cvn /DEST pdfmark end
 150 96 a 2 w Fe(C)t Ff(O)t(N)t(T)t(E)t(N)t(T)t(S)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 2 3
TeXDict begin 2 2 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.2) cvn /DEST pdfmark end
 142 -164 a 0 TeXcolorgray 0 TeXcolorgray 3718 -56 a
Fg(2)p 0 TeXcolorgray 150 0 a
SDict begin H.S end
 150 0 a 150 0 a
SDict begin 17.3749 H.A end
 150 0 a
150 0 a
SDict begin [/View [/XYZ H.V]/Dest (section.1) cvn /DEST pdfmark end
 150 0 a 152 96 a Fe(1)96 b(O)p Ff(V)t(E)t(RV)t(I)t(E)t(W)150
124 y
SDict begin H.S end
 150 124 a 150 124 a
SDict begin 17.3749 H.A end
 150 124 a 150 124 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.1) cvn /DEST pdfmark
end
 150 124
a 142 x Fd(1.1)79 b(Scope)150 437 y Fh(W)-7 b(e)26 b(want)g(to)h(cr)o
(eate)e(an)h(outdoor)i(virtual)d(r)o(eality)h(experience)g(for)h
(customers)f(at)f(a)h(Columbia)g(r)o(etail)g(stor)o(e.)f(The)150
581 y(application)f(will)i(consist)f(mainly)g(of)h(visual,)f(audio,)g
(and)g(tactile)g(experiences)g(to)h(cr)o(eate)f(an)g(outdoor)h(world)h
(in)150 725 y(which)i(the)f(user)h(can)f(navigate.)f(The)h(main)h
(activity)f(available)f(will)h(involve)h(\003y)g(\002shing)f(in)h(one)f
(of)i(the)e(rivers)150 869 y(within)j(the)f(envir)o(onment.)g(Users)g
(will)h(also)f(have)g(the)g(ability)g(to)h(interact)f(with)h(virtual)f
(Columbia)g(pr)o(oducts)150 1014 y(while)22 b(in)h(the)f(experience)f
(and)i(gain)e(speci\002c)h(pr)o(oduct)g(information.)150
1166 y
SDict begin H.S end
 150 1166 a 150 1166 a
SDict begin 17.3749 H.A end
 150 1166 a 150 1166 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.2) cvn /DEST pdfmark
end
 150
1166 a 122 x Fd(1.2)79 b(Purpose)150 1458 y Fh(The)35
b(main)h(goal)f(of)i(the)e(pr)o(oject)g(is)g(to)h(make)f(customers)g
(feel)h(mor)o(e)g(inclined)g(to)g(pur)o(chase)e(Columbia)h(gear)150
1602 y(thr)o(ough)29 b(the)h(use)f(of)h(an)f(immersive,)g(outdoor)h(V)l
(irtual)f(Reality)g(experience.)g(This)g(document)g(exists)g(both)g
(for)150 1747 y(development)22 b(of)g(the)g(pr)o(oject)g(and)g(to)g(pr)
o(ovide)g(a)g(detailed)g(description)g(of)h(the)f(design)g(plans.)150
1899 y
SDict begin H.S end
 150 1899 a 150 1899 a
SDict begin 17.3749 H.A end
 150 1899 a 150 1899 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.1.3) cvn /DEST pdfmark
end
 150
1899 a 122 x Fd(1.3)79 b(Intended)24 b(A)n(udience)150
2191 y Fh(The)34 b(intended)h(audience)f(of)i(this)e(design)g(document)
h(ar)o(e)f(the)g(student)g(developers)g(involved)h(\(EmbarkVR\),)150
2335 y(pr)o(oject)17 b(sponsors,)g(and)h(Capstone)f(teachers.)g(The)g
(development)h(team)f(will)h(be)g(using)f(this)h(r)o(eport)f(as)g(a)h
(guide)g(and)150 2480 y(will)i(pr)o(ovide)g(str)o(uctur)o(e)f(for)i
(the)f(development)g(pr)o(ocess.)e(The)i(sponsors)f(can)h(use)f(this)h
(document)g(to)g(understand)150 2624 y(the)f(vision)f(of)h(the)g
(developers)f(and)h(to)g(will)g(give)f(a)h(platform)f(to)h(discuss)f
(design)h(ideas.)f(The)g(teachers)g(can)h(bene\002t)150
2768 y(fr)o(om)k(this)e(document)i(by)e(learning)i(about)e(the)h(pr)o
(oject)f(as)g(a)h(whole.)150 2920 y
SDict begin H.S end
 150 2920 a 150 2920
a
SDict begin 17.3749 H.A end
 150 2920 a 150 2920 a
SDict begin [/View [/XYZ H.V]/Dest (section.2) cvn /DEST pdfmark end
 150 2920 a 152 3067 a Fe(2)96
b(D)t Ff(E)t(FI)t(N)t(I)t(T)t(I)t(O)t(N)t(S)p 0 TeXcolorgray
235 3237 a Fc(\017)p 0 TeXcolorgray 39 w Fh(V)l(irtual)22
b(Reality)f(\(VR\):)i(Arti\002cial)f(envir)o(onment)f(that)h(is)g(cr)o
(eated)f(with)h(softwar)o(e)p 0 TeXcolorgray 235 3381
a Fc(\017)p 0 TeXcolorgray 39 w Fh(HTC)g(V)l(ive:)f(A)h(virtual)g(r)o
(eality)f(headset)g(pr)o(oduced)i(by)f(HTC)p 0 TeXcolorgray
235 3525 a Fc(\017)p 0 TeXcolorgray 39 w Fh(Base)f(Stations:)e(These)h
(allow)h(the)g(V)l(ive)g(to)g(track)g(the)g(movement)f(and)h(location)h
(of)f(the)g(wands)g(and)g(headset.)p 0 TeXcolorgray 235
3670 a Fc(\017)p 0 TeXcolorgray 39 w Fh(W)-7 b(ands:)22
b(Contr)o(ollers)g(that)g(ar)o(e)f(used)h(with)g(the)g(HTC)g(headset.)p
0 TeXcolorgray 235 3814 a Fc(\017)p 0 TeXcolorgray 39
w Fh(Unity)30 b(Game)h(Engine:)g(The)f(Unity)g(Game)g(Engine,)h
(developed)g(by)f(Unity)g(T)-7 b(echnologies)30 b(is)h(used)f(in)h
(this)308 3958 y(pr)o(oject)22 b(to)g(develop)g(the)g(virtual)f(r)o
(eality)g(simulation.)p 0 TeXcolorgray 235 4102 a Fc(\017)p
0 TeXcolorgray 39 w Fh(GitHub:)h(W)-7 b(eb-based)21 b(Git)i(r)o
(epository)e(hosting)h(service)p 0 TeXcolorgray 235 4247
a Fc(\017)p 0 TeXcolorgray 39 w Fh(Git:)h(version)f(contr)o(ol)g
(system)f(used)h(for)h(softwar)o(e)e(development)150
4399 y
SDict begin H.S end
 150 4399 a 150 4399 a
SDict begin 17.3749 H.A end
 150 4399 a 150 4399 a
SDict begin [/View [/XYZ H.V]/Dest (section.3) cvn /DEST pdfmark end
 150
4399 a 152 4545 a Fe(3)96 b(P)t Ff(R)s(O)t(J)t(E)t(C)t(T)33
b Fe(C)t Ff(O)t(N)t(T)t(E)t(X)t(T)150 4573 y
SDict begin H.S end
 150 4573
a 150 4573 a
SDict begin 17.3749 H.A end
 150 4573 a 150 4573 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.1) cvn /DEST pdfmark
end
 150 4573 a 143 x Fd(3.1)79
b(Har)n(d)o(ware)p 0 TeXcolorgray 235 4886 a Fc(\017)p
0 TeXcolorgray 39 w Fh(Laptop)22 b(Computers)f(with)h(the)g(following)h
(speci\002cations:)p 0 TeXcolorgray 308 5047 a Fb(\226)p
0 TeXcolorgray 39 w Fh(Pr)o(ocessor:)f(Intel)g(Cor)o(e)g(i5-4590)e(or)j
(AMD)f(FX)g(8350,)e(or)j(better)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 3 4
TeXDict begin 3 3 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.3) cvn /DEST pdfmark end
 142 -164 a 0 TeXcolorgray 0 TeXcolorgray 3718 -56 a
Fg(3)p 0 TeXcolorgray 0 TeXcolorgray 308 96 a Fb(\226)p
0 TeXcolorgray 39 w Fh(Graphics:)22 b(NVIDIA)f(GeFor)o(ce)i(GTX)f(1060)
f(or)h(AMD)g(Radeon)g(RX480,)f(or)h(better)p 0 TeXcolorgray
308 240 a Fb(\226)p 0 TeXcolorgray 39 w Fh(Memory:)h(4GB)f(RAM)g(or)g
(better)p 0 TeXcolorgray 308 385 a Fb(\226)p 0 TeXcolorgray
39 w Fh(Operating)g(system:)f(W)l(indows)h(7)g(SP1)f(or)i(better)p
0 TeXcolorgray 235 546 a Fc(\017)p 0 TeXcolorgray 39
w Fh(HTC)f(V)l(ive)g(Headset:)f(Used)g(to)h(track)g(head)h(movements)e
(and)h(display)f(application)g(to)h(users.)p 0 TeXcolorgray
235 690 a Fc(\017)p 0 TeXcolorgray 39 w Fh(HTC)33 b(W)-7
b(ands)32 b(\(x2\):)g(Used)g(to)h(track)g(the)f(users)g(hand)g
(movements)g(and)h(to)g(give)f(the)g(user)h(the)f(ability)g(to)308
834 y(interact)22 b(with)g(virtual)g(objects)f(within)h(the)g
(application.)p 0 TeXcolorgray 235 978 a Fc(\017)p 0
TeXcolorgray 39 w Fh(HTC)k(Base)f(Stations)f(\(x2\):)i(Used)f(to)g
(track)h(location)g(of)g(headset)f(and)g(wands.)g(This)g(is)h
(information)g(is)f(then)308 1123 y(sent)d(back)g(to)g(the)g(computer)f
(in)i(r)o(eal)e(time.)150 1275 y
SDict begin H.S end
 150 1275 a 150 1275
a
SDict begin 17.3749 H.A end
 150 1275 a 150 1275 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.3.2) cvn /DEST pdfmark
end
 150 1275 a 122 x Fd(3.2)79 b(Software)p
0 TeXcolorgray 235 1567 a Fc(\017)p 0 TeXcolorgray 39
w Fh(Unity)22 b(Gaming)g(Engine:)h(Used)e(to)h(develop)g(the)g
(application.)p 0 TeXcolorgray 235 1711 a Fc(\017)p 0
TeXcolorgray 39 w Fh(Unity)g(Asset)f(Stor)o(e:)g(Used)h(to)g(\002nd)g
(objects)f(which)i(can)f(be)g(imported)g(into)g(the)g(application.)p
0 TeXcolorgray 235 1855 a Fc(\017)p 0 TeXcolorgray 39
w Fh(GitHub:)g(Used)g(by)f(developers)h(to)g(collaborate)g(and)g(shar)o
(e)g(\002les.)150 2008 y
SDict begin H.S end
 150 2008 a 150 2008 a
SDict begin 17.3749 H.A end
 150 2008
a 150 2008 a
SDict begin [/View [/XYZ H.V]/Dest (section.4) cvn /DEST pdfmark end
 150 2008 a 152 2154 a Fe(4)96 b(D)t Ff(E)t(S)t(I)t(G)t(N)
33 b Fe(D)t Ff(E)t(S)t(C)t(R)t(I)t(P)t(T)t(I)t(O)t(N)150
2182 y
SDict begin H.S end
 150 2182 a 150 2182 a
SDict begin 17.3749 H.A end
 150 2182 a 150 2182 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.1) cvn /DEST pdfmark
end
 150
2182 a 142 x Fd(4.1)79 b(Design)23 b(stakeholder)o(s)150
2368 y
SDict begin H.S end
 150 2368 a 150 2368 a
SDict begin 17.3749 H.A end
 150 2368 a 150 2368 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.1) cvn /DEST
pdfmark end
 150
2368 a 127 x Fa(4.1.1)79 b(Intel)150 2657 y Fh(Intel)18
b(is)f(working)i(with)f(Columbia)g(Sportwear)f(to)h(help)g(them)g(meet)
f(their)h(needs)g(when)h(it)f(comes)f(to)i(this)e(Outdoor)150
2802 y(Simulation)29 b(Pr)o(oject.)g(Intel)h(has)f(graciously)h(pr)o
(ovided)g(all)g(necessary)f(har)o(dwar)o(e)h(to)g(our)g(team)f(to)i
(allow)f(us)f(to)150 2946 y(cr)o(eate)21 b(a)h(successful)f
(application.)150 3061 y
SDict begin H.S end
 150 3061 a 150 3061 a
SDict begin 17.3749 H.A end
 150 3061
a 150 3061 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.1.2) cvn /DEST
pdfmark end
 150 3061 a 122 x Fa(4.1.2)79 b(Columbia)22
b(Spor)s(ts)n(w)o(ear)150 3346 y Fh(One)28 b(aspect)e(of)i(Columbia)f
(Sportwear)g(is)h(their)f(\002shing)h(appar)o(el.)d(Speci\002cally)-9
b(,)27 b(the)g(Performace)h(Fishing)g(Gear)150 3490 y(\(PFG\))k(line)f
(of)h(appar)o(el.)d(Columbia)i(hopes)f(to)h(use)g(the)g(application)e
(we)j(ar)o(e)e(developing)h(in)g(a)g(r)o(etail)f(stor)o(e)h(to)150
3634 y(showcase)25 b(the)h(PFG)h(line)f(in)g(a)g(new)g(medium.)g(The)f
(goal)h(is)g(inspir)o(e)f(customers)h(to)g(try)g(new)g(outdoor)h
(activities)150 3779 y(with)22 b(Columbia)g(gear)-6 b(.)150
3931 y
SDict begin H.S end
 150 3931 a 150 3931 a
SDict begin 17.3749 H.A end
 150 3931 a 150 3931 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.2) cvn /DEST pdfmark
end
 150
3931 a 122 x Fd(4.2)79 b(Design)23 b(vie)o(ws)150 4096
y
SDict begin H.S end
 150 4096 a 150 4096 a
SDict begin 17.3749 H.A end
 150 4096 a 150 4096 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.2.1) cvn /DEST
pdfmark end
 150 4096
a 127 x Fa(4.2.1)79 b(Users)150 4386 y Fh(Users)23 b(of)h(the)f(pr)o
(oduct)h(expect)e(this)i(virtual)e(r)o(eality)h(experience)h(to)f(be)h
(as)e(r)o(ealistic)h(and)h(immersive)f(as)g(possible.)150
4530 y(W)-7 b(e)38 b(will)g(be)f(making)h(the)f(assumption)f(that)i
(users)f(will)h(be)f(experiencing)h(this)f(application)g(with)h(out)f
(any)150 4674 y(pr)o(evious)16 b(virtual)h(r)o(eality)f(or)i(\003y)g
(\002shing)f(experience.)g(W)-7 b(e)17 b(ar)o(e)g(making)g(the)g
(assumption)f(to)h(account)h(for)g(everyone)150 4819
y(who)24 b(may)g(be)f(inter)o(ested)g(in)i(participating.)d(Fr)o(om)i
(their)g(perspective,)e(they)i(will)g(car)o(e)f(most)h(about)f(their)h
(ability)150 4963 y(to)32 b(quickly)h(understand)e(how)i(to)f(move)g
(ar)o(ound)g(and)g(interact)g(with)g(objects.)f(This)g(means)g(that)h
(we)g(need)g(to)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 4 5
TeXDict begin 4 4 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.4) cvn /DEST pdfmark end
 142 -164 a 0 TeXcolorgray 0 TeXcolorgray 3718 -56 a
Fg(4)p 0 TeXcolorgray 150 96 a Fh(cr)o(eate)23 b(intuitive)g(tools)h
(and)g(contr)o(ols.)g(Users)f(can)h(also)f(expect)h(to)g(\002nd)g
(visual)f(queues)g(and)h(instr)o(uctions)g(within)150
240 y(the)e(experience.)269 384 y(Ther)o(e)28 b(ar)o(e)f(two)i(main)f
(perspectives)f(that)g(users)h(will)h(have)e(when)i(using)f(this)g(pr)o
(oduct.)g(Firstly)-9 b(,)28 b(users)g(will)150 528 y(be)g(hoping)h(to)g
(gain)f(an)g(outdoor)i(experience)e(that)g(they)g(might)h(not)f
(otherwise)h(have)f(the)g(opportunity)g(to)h(try)-9 b(.)150
673 y(Ther)o(efor)o(e,)24 b(r)o(ealism)g(is)h(key)g(in)g(this)g(view)-7
b(.)24 b(Secondly)-9 b(,)25 b(users)g(will)g(expect)f(interaction)h
(with)g(Columbia)f(gear)h(in)g(a)150 817 y(meaningful)c(way)-9
b(.)21 b(The)g(user)g(should)g(leave)f(the)h(experience)g(with)h(a)f
(feeling)g(of)h(how)g(the)f(Columbia)g(gear)g(would)150
961 y(perform)i(in)f(a)g(certain)g(envir)o(onment.)150
1071 y
SDict begin H.S end
 150 1071 a 150 1071 a
SDict begin 17.3749 H.A end
 150 1071 a 150 1071 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.2.2) cvn /DEST
pdfmark end
 150
1071 a 121 x Fa(4.2.2)79 b(Intel)22 b(Sponsor)g(\(Mik)n(e)g(Premi\))150
1354 y Fh(The)i(Intel)h(sponsor)f(of)i(the)e(pr)o(oject,)g(Mike)h(Pr)o
(emi,)f(is)g(concerned)i(mor)o(e)f(with)g(the)g(technical)f(side)h(of)g
(the)g(pr)o(oject.)150 1499 y(Things)19 b(like)i(which)f(technologies)g
(ar)o(e)g(used,)f(the)h(techical)g(performance,)g(and)g(overall)g
(technical)g(design)g(consid-)150 1643 y(erations)i(ar)o(e)f(important)
h(under)g(this)g(view)-7 b(.)21 b(This)h(view)f(will)i(guide)f(the)g
(design)g(pr)o(ocess)f(on)i(a)e(technical)h(level.)269
1787 y(One)f(of)h(the)f(main)g(goals)f(of)i(the)f(pr)o(oject)f(is)h(to)
g(make)f(the)h(experience)g(as)f(immersive)h(and)g(r)o(eal)g(as)f
(possible.)g(T)-7 b(o)150 1931 y(achieve)21 b(this)f(we)h(will)h
(\002rst)f(need)g(to)g(use)g(a)g(high)g(performance)g(computer)-6
b(.)21 b(Second,)g(we)h(will)f(need)g(to)h(constantly)150
2075 y(be)c(awar)o(e)f(of)i(performance)f(r)o(estrictions)g(during)g
(the)g(development)g(pr)o(ocess,)f(mainly)g(while)i(impr)o(oving)e(r)o
(ealism.)150 2219 y(The)i(r)o(ealism)g(techniques)g(we)g(discuss)g
(later)g(in)h(this)f(document)h(will)g(all)f(take)g(a)g(toll)h(on)g
(performance)f(speeds)g(and)150 2364 y(application)i(r)o(esponsivess.)
150 2473 y
SDict begin H.S end
 150 2473 a 150 2473 a
SDict begin 17.3749 H.A end
 150 2473 a 150 2473
a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.2.3) cvn /DEST
pdfmark end
 150 2473 a 122 x Fa(4.2.3)79 b(Columbia)22 b(Sponsor)f(\(Tim)i(De)n
(vlin\))150 2757 y Fh(The)31 b(Columbia)f(Sportwear)g(sponsor)h(of)h
(the)f(pr)o(oject,)e(T)l(im)i(Devlin,)g(is)f(concer)o(ened)i(primarily)
f(with)g(the)g(how)150 2901 y(the)g(user)g(will)g(interact)g(with)g
(Columbia)f(pr)o(oducts)h(in)g(the)g(V)l(irtual)f(Reality)h
(experience.)f(This)h(includes,)g(how)150 3045 y(pr)o(oducts)d(ar)o(e)h
(displayed,)f(what)g(information)i(r)o(elated)e(to)h(the)g(pr)o(oducts)
f(is)h(shown,)g(and)g(the)g(user)f(interaction)150 3190
y(with)33 b(said)g(pr)o(oducts.)g(Ultimately)-9 b(,)32
b(the)h(goal)h(of)g(the)f(pr)o(oduct)g(under)h(this)f(view)g(is)g(to)h
(cr)o(eate)f(mor)o(e)g(sales)f(for)150 3334 y(Columbia)24
b(Sportswear)-6 b(.)24 b(Ther)o(efor)o(e,)g(that)g(is)g(what)h(is)f
(most)g(important)g(under)h(this)g(view)-7 b(.)24 b(This)g(view)g(will)
h(gude)150 3478 y(the)d(design)g(pr)o(ocess)f(of)i(a)f(higher)g(level)g
(compar)o(ed)g(to)g(the)g(Intel)g(Sponsor)f(view)-7 b(.)150
3622 y
SDict begin H.S end
 150 3622 a 150 3622 a
SDict begin 17.3749 H.A end
 150 3622 a 150 3622 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.4.3) cvn /DEST pdfmark
end
 150
3622 a 121 x Fd(4.3)79 b(Design)23 b(vie)o(wpoints)150
3787 y
SDict begin H.S end
 150 3787 a 150 3787 a
SDict begin 17.3749 H.A end
 150 3787 a 150 3787 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.3.1) cvn /DEST
pdfmark end
 150
3787 a 126 x Fa(4.3.1)79 b(Conte)n(xt)22 b(vie)n(wpoint)150
4075 y Fh(This)h(context)h(is)g(r)o(elated)g(to)g(user)g(interaction)g
(with)g(the)g(application)f(in)h(its)f(envir)o(onment.)h(It)g(pr)o
(ovides)f(a)h(\224black)150 4220 y(box\224)e(view)f(of)i(the)f(pr)o
(oject)f(which)i(can)f(be)g(useful)f(fr)o(om)i(the)f(perspective)e(of)j
(developers.)p 0 TeXcolorgray 235 4379 a Fc(\017)p 0
TeXcolorgray 39 w Fh(Design)f(Concern:)g(The)f(main)g(concern)i(will)f
(come)f(fr)o(om)h(users)f(of)h(the)f(VR)h(application.)e(Users)h(will)g
(only)h(be)308 4523 y(able)h(to)g(see)g(the)g(outside)g(of)h(the)f
(application)f(and)h(their)h(ability)e(to)i(interact)f(seemlessly)f(is)
g(essential.)g(Users)308 4667 y(do)h(not)f(want)g(to)g(experience)g
(performance)g(lag)g(or)h(err)o(ors)f(in)g(functionality)-9
b(.)p 0 TeXcolorgray 235 4812 a Fc(\017)p 0 TeXcolorgray
39 w Fh(Analytical)23 b(Methods:)h(The)g(design)g(will)g(be)g
(evaluated)f(during)h(user)g(testing)f(on)h(the)g(basis)f(on)h
(immersion,)308 4956 y(enjoyment,)29 b(and)g(possibly)e(in\003uence)i
(over)h(customers)e(decisions.)g(After)h(users)f(test)h(the)f
(application)g(we)308 5100 y(will)23 b(ask)e(for)i(feedback)f(r)o
(elated)g(their)g(experience.)p 0 TeXcolorgray 0 TeXcolorgray
eop end
%%Page: 5 6
TeXDict begin 5 5 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.5) cvn /DEST pdfmark end
 142 -164 a 0 TeXcolorgray 0 TeXcolorgray 3718 -56 a
Fg(5)p 0 TeXcolorgray 0 TeXcolorgray 235 96 a Fc(\017)p
0 TeXcolorgray 39 w Fh(Rationale:)23 b(W)-7 b(e)23 b(included)h(this)f
(viewpoint)g(due)g(to)g(the)g(importance)g(of)h(user)f(immersion.)g
(The)g(user)g(experi-)308 240 y(ence)e(in)f(V)l(irtual)f(Reality)h
(applications)e(is)i(very)g(sensitive)f(and)h(ther)o(e)g(ar)o(e)g(a)f
(lot)i(of)f(factors)g(that)g(can)g(in\003uence)308 385
y(it.)150 479 y
SDict begin H.S end
 150 479 a 150 479 a
SDict begin 17.3749 H.A end
 150 479 a 150 479
a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.3.2) cvn /DEST
pdfmark end
 150 479 a 143 x Fa(4.3.2)79 b(Composition)21 b(vie)n(wpoint)150
785 y Fh(*[Composition)34 b(viewpoint)g(describes)g(the)g(way)g(the)g
(design)h(subject)d(is)i(\(r)o(ecursively\))h(str)o(uctur)o(ed)f(into)g
(con-)150 929 y(stituent)21 b(parts)g(and)h(establishes)e(the)i(r)o
(oles)g(of)h(those)e(parts.]*)p 0 TeXcolorgray 235 1090
a Fc(\017)p 0 TeXcolorgray 39 w Fh(Design)h(Concern:)p
0 TeXcolorgray 235 1234 a Fc(\017)p 0 TeXcolorgray 39
w Fh(Analytical)f(Methods)p 0 TeXcolorgray 235 1378 a
Fc(\017)p 0 TeXcolorgray 39 w Fh(Rationale)150 1472 y
SDict begin H.S end

150 1472 a 150 1472 a
SDict begin 17.3749 H.A end
 150 1472 a 150 1472 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.3.3) cvn /DEST
pdfmark end
 150 1472
a 143 x Fa(4.3.3)79 b(Dependency)22 b(vie)n(wpoint)150
1778 y Fh(*[The)j(Dependency)g(viewpoint)f(speci\002es)f(the)i(r)o
(elationships)e(of)j(inter)o(connection)f(and)g(access)e(among)i
(entities.)150 1922 y(These)20 b(r)o(elationships)g(include)h(shar)o
(ed)g(information,)g(or)o(der)h(of)g(execution,)f(or)g
(parameterization)f(of)h(interfaces.]*)p 0 TeXcolorgray
235 2083 a Fc(\017)p 0 TeXcolorgray 39 w Fh(Design)h(Concern:)p
0 TeXcolorgray 235 2227 a Fc(\017)p 0 TeXcolorgray 39
w Fh(Analytical)f(Methods)p 0 TeXcolorgray 235 2372 a
Fc(\017)p 0 TeXcolorgray 39 w Fh(Rationale)150 2466 y
SDict begin H.S end

150 2466 a 150 2466 a
SDict begin 17.3749 H.A end
 150 2466 a 150 2466 a
SDict begin [/View [/XYZ H.V]/Dest (subsubsection.4.3.4) cvn /DEST
pdfmark end
 150 2466
a 143 x Fa(4.3.4)79 b(Interf)n(ace)22 b(vie)n(wpoint)150
2772 y Fh(*[Interface)30 b(viewpoint)g(pr)o(ovides)g(information)h
(designers,)f(pr)o(ogrammers,)f(and)h(testers)g(the)g(means)f(to)i
(know)150 2916 y(how)23 b(to)g(corr)o(ectly)g(use)g(the)f(services)g
(pr)o(ovided)h(by)g(a)g(design)f(subject.)g(This)g(description)h
(includes)f(the)h(details)f(of)150 3060 y(external)g(and)g(internal)g
(interfaces)g(not)g(pr)o(ovided)g(in)g(the)g(SRS.]*)p
0 TeXcolorgray 235 3221 a Fc(\017)p 0 TeXcolorgray 39
w Fh(Design)g(Concern:)p 0 TeXcolorgray 235 3365 a Fc(\017)p
0 TeXcolorgray 39 w Fh(Analytical)f(Methods)p 0 TeXcolorgray
235 3509 a Fc(\017)p 0 TeXcolorgray 39 w Fh(Rationale)150
3641 y
SDict begin H.S end
 150 3641 a 150 3641 a
SDict begin 17.3749 H.A end
 150 3641 a 150 3641 a
SDict begin [/View [/XYZ H.V]/Dest (section.5) cvn /DEST pdfmark end
 150
3641 a 152 3808 a Fe(5)96 b(A)t Ff(P)t(P)t(R)s(OA)q(C)t(H)150
3836 y
SDict begin H.S end
 150 3836 a 150 3836 a
SDict begin 17.3749 H.A end
 150 3836 a 150 3836 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.1) cvn /DEST pdfmark
end
 150
3836 a 142 x Fd(5.1)79 b(Static)23 b(En)m(vir)n(onment)150
4149 y Fh(\(terrain,)f(static)f(objects,)g(Columbia)h(gear)g(assets\))
150 4301 y
SDict begin H.S end
 150 4301 a 150 4301 a
SDict begin 17.3749 H.A end
 150 4301 a 150 4301
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.2) cvn /DEST pdfmark
end
 150 4301 a 122 x Fd(5.2)79 b(Impr)n(o)n(ve)24 b(Realism)f(and)f
(Animate)i(En)m(vir)n(onment)150 4593 y Fh(One)37 b(of)h(the)e(main)h
(goals)f(of)i(our)f(pr)o(oject)f(is)g(to)h(make)f(it)h(as)f(r)o
(ealistic)g(as)g(possible)g(without)g(compr)o(omising)150
4737 y(performance.)27 b(Realism)f(can)g(come)h(fr)o(om)h(a)e(number)h
(of)g(dif)o(fer)o(ent)g(techniques.)g(The)f(\002rst)g(we)h(will)g(be)g
(focusing)150 4882 y(on)21 b(is)f(envir)o(onment)g(animation.)f(A)h
(majority)g(of)h(our)f(application)f(will)i(take)f(place)f(in)i(a)f
(river)g(so)g(we)h(will)f(need)h(to)150 5026 y(make)f(this)h(river)g
(as)f(animated)g(as)g(possible.)f(W)-7 b(e)21 b(will)g(need)g(to)g(add)
g(an)g(animation)f(of)h(the)g(water)g(moving)f(passed)p
0 TeXcolorgray 0 TeXcolorgray eop end
%%Page: 6 7
TeXDict begin 6 6 bop 0 TeXcolorgray 0 0 a
SDict begin /product where{pop product(Distiller)search{pop pop pop
version(.)search{exch pop exch pop(3011)eq{gsave newpath 0 0 moveto
closepath clip/Courier findfont 10 scalefont setfont 72 72 moveto(.)show
grestore}if}{pop}ifelse}{pop}ifelse}if end
 0 0 a 0 TeXcolorgray
142 -164 a
SDict begin H.S end
 142 -164 a 142 -164 a
SDict begin H.R end
 142 -164 a 142 -164
a
SDict begin [/View [/XYZ H.V]/Dest (page.6) cvn /DEST pdfmark end
 142 -164 a 0 TeXcolorgray 0 TeXcolorgray 3718 -56 a
Fg(6)p 0 TeXcolorgray 150 96 a Fh(the)19 b(users.)g(This)g(can)g(be)g
(done)h(using)f(one)h(of)g(the)g(open-sour)o(ce)f(animated)g(water)g
(shadings.)g(A)g(similar)g(technique)150 240 y(can)j(be)g(used)g(to)g
(cr)o(eate)f(movement)h(of)h(clouds)f(in)g(the)g(sky)-9
b(.)269 385 y(The)24 b(next)h(step)f(to)h(impr)o(oving)g(r)o(ealism)f
(is)g(adding)i(audio.)f(Audio)g(is)g(cr)o(ucial)g(when)g(it)g(comes)g
(to)g(immersion)150 529 y(so)31 b(not)h(only)g(will)g(we)f(need)h(to)g
(add)g(water)f(noises)g(but)g(also)g(noises)g(r)o(elated)g(to)h(wind)g
(and)g(a)f(wide)h(range)f(of)150 673 y(animals.)c(In)i(Unity)-9
b(,)28 b(sounds)h(originate)f(fr)o(om)h(Audio)g(Sour)o(ce)f(attached)g
(to)h(objects.)f(Those)g(sounds)g(and)h(audio)150 817
y(clips)21 b(can)h(be)f(found)i(in)e(any)h(open-sour)o(ce)f(audio)h
(library)f(and)h(easily)f(imported)h(into)g(Unity)-9
b(.)21 b(The)g(last)g(technique)150 962 y(we)32 b(will)g(be)g(focusing)
g(to)g(impr)o(ove)f(r)o(ealism)g(is)h(lighting)g(and)g(shadowing.)f
(This)h(can)f(be)h(achieved)g(using)f(the)150 1106 y(built-in)22
b(dir)o(ectional)g(lighting)h(tools)f(within)g(Unity)-9
b(.)150 1258 y
SDict begin H.S end
 150 1258 a 150 1258 a
SDict begin 17.3749 H.A end
 150 1258 a 150 1258
a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.3) cvn /DEST pdfmark
end
 150 1258 a 122 x Fd(5.3)79 b(T)-6 b(actile)23 b(User)f(Interaction)
150 1550 y Fh(\(user)g(interaction)g(with)g(gear)-6 b(,)22
b(Columbia)g(gear)g(info\))150 1703 y
SDict begin H.S end
 150 1703 a 150
1703 a
SDict begin 17.3749 H.A end
 150 1703 a 150 1703 a
SDict begin [/View [/XYZ H.V]/Dest (subsection.5.4) cvn /DEST pdfmark
end
 150 1703 a 122 x Fd(5.4)79
b(Rod)23 b(mec)o(hanics)150 1995 y Fh(In)i(or)o(der)h(to)g(cr)o(eate)f
(a)g(r)o(ealistic)f(\002shing)h(experience,)g(the)h(user)f(will)g(need)
h(to)g(be)f(able)g(to)g(interact)g(with)h(a)f(virtual)150
2139 y(\002shing)20 b(r)o(od.)g(The)f(user)6 b('s)19
b(interaction)h(with)g(the)g(r)o(od)g(will)g(be)g(primarily)g(based)f
(ar)o(ound)h(the)g(use)f(of)h(the)g(HTC)g(V)l(ive)150
2283 y(contr)o(ollers.)h(Like)h(other)g(virtual)e(r)o(eality)h
(simulations,)e(in)j(the)f(game)g(you)g(will)g(not)h(see)e(the)i(V)l
(ive)e(contr)o(ollers,)i(but)150 2428 y(instead)i(virtual)g(hands.)g
(The)h(user)f(will)h(then)g(be)f(able)g(to)h(pick)g(up)f(the)g
(\002shing)h(r)o(od)g(using)f(these)h(virtual)f(hands.)150
2572 y(T)-7 b(o)20 b(make)h(this)f(interaction)h(as)f(natural)g(as)g
(possible)g(the)g(VR)h(hands)g(need)g(to)g(feel)g(like)g(an)g(actual)e
(extension)i(of)g(the)150 2716 y(user)6 b('s)25 b(body)-9
b(.)27 b(Once)g(the)f(user)g(has)g(picked)g(up)g(the)g(\002shing)h(r)o
(od,)f(it)h(needs)f(to)g(behave)g(as)f(an)i(actual)e(r)o(od)i(would.)
150 2860 y(This)c(means)h(that)f(we)i(will)f(be)g(using)g(Unity's)f(3D)
h(physics)f(engine)i(extensively)e(to)h(cr)o(eate)g(r)o(ealistic)f
(movements)150 3005 y(with)f(the)g(\002shing)g(r)o(od,)g(line,)g(and)h
(bait.)p 0 TeXcolorgray 0 TeXcolorgray eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
